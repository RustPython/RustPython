///! Python opcode implementation. Currently aligned with cpython 3.13.7

// This file is generated by scripts/gen_instructions.py
// Do not edit!

/// A Single bytecode instruction.
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(u16)]
pub enum Instruction {
    Cache = 0,
    BeforeAsyncWith = 1,
    BeforeWith = 2,
    BinaryOpInplaceAddUnicode = 3,
    BinarySlice = 4,
    BinarySubscr = 5,
    CheckEgMatch = 6,
    CheckExcMatch = 7,
    CleanupThrow = 8,
    DeleteSubscr = 9,
    EndAsyncFor = 10,
    EndFor = 11,
    EndSend = 12,
    ExitInitCheck = 13,
    FormatSimple = 14,
    FormatWithSpec = 15,
    GetAiter = 16,
    Reserved = 17,
    GetAnext = 18,
    GetIter = 19,
    GetLen = 20,
    GetYieldFromIter = 21,
    InterpreterExit = 22,
    LoadAssertionError = 23,
    LoadBuildClass = 24,
    LoadLocals = 25,
    MakeFunction = 26,
    MatchKeys = 27,
    MatchMapping = 28,
    MatchSequence = 29,
    Nop = 30,
    PopExcept = 31,
    PopTop = 32,
    PushExcInfo = 33,
    PushNull = 34,
    ReturnGenerator = 35,
    ReturnValue = 36,
    SetupAnnotations = 37,
    StoreSlice = 38,
    StoreSubscr = 39,
    ToBool = 40,
    UnaryInvert = 41,
    UnaryNegative = 42,
    UnaryNot = 43,
    WithExceptStart = 44,
    BinaryOp(Arg<u32>) = 45,
    BuildConstKeyMap(Arg<u32>) = 46,
    BuildList(Arg<u32>) = 47,
    BuildMap(Arg<u32>) = 48,
    BuildSet(Arg<u32>) = 49,
    BuildSlice(Arg<u32>) = 50,
    BuildString(Arg<u32>) = 51,
    BuildTuple(Arg<u32>) = 52,
    Call(Arg<u32>) = 53,
    CallFunctionEx(Arg<u32>) = 54,
    CallIntrinsic1(Arg<u32>) = 55,
    CallIntrinsic2(Arg<u32>) = 56,
    CallKw(Arg<u32>) = 57,
    CompareOp(Arg<u32>) = 58,
    ContainsOp(Arg<u32>) = 59,
    ConvertValue(Arg<u32>) = 60,
    Copy(Arg<u32>) = 61,
    CopyFreeVars(Arg<u32>) = 62,
    DeleteAttr(Arg<u32>) = 63,
    DeleteDeref(Arg<u32>) = 64,
    DeleteFast(Arg<u32>) = 65,
    DeleteGlobal(Arg<u32>) = 66,
    DeleteName(Arg<u32>) = 67,
    DictMerge(Arg<u32>) = 68,
    DictUpdate(Arg<u32>) = 69,
    EnterExecutor(Arg<u32>) = 70,
    ExtendedArg(Arg<u32>) = 71,
    ForIter(Arg<u32>) = 72,
    GetAwaitable(Arg<u32>) = 73,
    ImportFrom(Arg<u32>) = 74,
    ImportName(Arg<u32>) = 75,
    IsOp(Arg<u32>) = 76,
    JumpBackward(Arg<u32>) = 77,
    JumpBackwardNoInterrupt(Arg<u32>) = 78,
    JumpForward(Arg<u32>) = 79,
    ListAppend(Arg<u32>) = 80,
    ListExtend(Arg<u32>) = 81,
    LoadAttr(Arg<u32>) = 82,
    LoadConst(Arg<u32>) = 83,
    LoadDeref(Arg<u32>) = 84,
    LoadFast(Arg<u32>) = 85,
    LoadFastAndClear(Arg<u32>) = 86,
    LoadFastCheck(Arg<u32>) = 87,
    LoadFastLoadFast(Arg<u32>) = 88,
    LoadFromDictOrDeref(Arg<u32>) = 89,
    LoadFromDictOrGlobals(Arg<u32>) = 90,
    LoadGlobal(Arg<u32>) = 91,
    LoadName(Arg<u32>) = 92,
    LoadSuperAttr(Arg<u32>) = 93,
    MakeCell(Arg<u32>) = 94,
    MapAdd(Arg<u32>) = 95,
    MatchClass(Arg<u32>) = 96,
    PopJumpIfFalse(Arg<u32>) = 97,
    PopJumpIfNone(Arg<u32>) = 98,
    PopJumpIfNotNone(Arg<u32>) = 99,
    PopJumpIfTrue(Arg<u32>) = 100,
    RaiseVarargs(Arg<u32>) = 101,
    Reraise(Arg<u32>) = 102,
    ReturnConst(Arg<u32>) = 103,
    Send(Arg<u32>) = 104,
    SetAdd(Arg<u32>) = 105,
    SetFunctionAttribute(Arg<u32>) = 106,
    SetUpdate(Arg<u32>) = 107,
    StoreAttr(Arg<u32>) = 108,
    StoreDeref(Arg<u32>) = 109,
    StoreFast(Arg<u32>) = 110,
    StoreFastLoadFast(Arg<u32>) = 111,
    StoreFastStoreFast(Arg<u32>) = 112,
    StoreGlobal(Arg<u32>) = 113,
    StoreName(Arg<u32>) = 114,
    Swap(Arg<u32>) = 115,
    UnpackEx(Arg<u32>) = 116,
    UnpackSequence(Arg<u32>) = 117,
    YieldValue(Arg<u32>) = 118,
    Resume(Arg<u32>) = 149,
    BinaryOpAddFloat = 150,
    BinaryOpAddInt = 151,
    BinaryOpAddUnicode = 152,
    BinaryOpMultiplyFloat = 153,
    BinaryOpMultiplyInt = 154,
    BinaryOpSubtractFloat = 155,
    BinaryOpSubtractInt = 156,
    BinarySubscrDict = 157,
    BinarySubscrGetitem = 158,
    BinarySubscrListInt = 159,
    BinarySubscrStrInt = 160,
    BinarySubscrTupleInt = 161,
    CallAllocAndEnterInit(Arg<u32>) = 162,
    CallBoundMethodExactArgs(Arg<u32>) = 163,
    CallBoundMethodGeneral(Arg<u32>) = 164,
    CallBuiltinClass(Arg<u32>) = 165,
    CallBuiltinFast(Arg<u32>) = 166,
    CallBuiltinFastWithKeywords(Arg<u32>) = 167,
    CallBuiltinO(Arg<u32>) = 168,
    CallIsinstance(Arg<u32>) = 169,
    CallLen(Arg<u32>) = 170,
    CallListAppend(Arg<u32>) = 171,
    CallMethodDescriptorFast(Arg<u32>) = 172,
    CallMethodDescriptorFastWithKeywords(Arg<u32>) = 173,
    CallMethodDescriptorNoargs(Arg<u32>) = 174,
    CallMethodDescriptorO(Arg<u32>) = 175,
    CallNonPyGeneral(Arg<u32>) = 176,
    CallPyExactArgs(Arg<u32>) = 177,
    CallPyGeneral(Arg<u32>) = 178,
    CallStr1(Arg<u32>) = 179,
    CallTuple1(Arg<u32>) = 180,
    CallType1(Arg<u32>) = 181,
    CompareOpFloat(Arg<u32>) = 182,
    CompareOpInt(Arg<u32>) = 183,
    CompareOpStr(Arg<u32>) = 184,
    ContainsOpDict(Arg<u32>) = 185,
    ContainsOpSet(Arg<u32>) = 186,
    ForIterGen(Arg<u32>) = 187,
    ForIterList(Arg<u32>) = 188,
    ForIterRange(Arg<u32>) = 189,
    ForIterTuple(Arg<u32>) = 190,
    LoadAttrClass(Arg<u32>) = 191,
    LoadAttrGetattributeOverridden(Arg<u32>) = 192,
    LoadAttrInstanceValue(Arg<u32>) = 193,
    LoadAttrMethodLazyDict(Arg<u32>) = 194,
    LoadAttrMethodNoDict(Arg<u32>) = 195,
    LoadAttrMethodWithValues(Arg<u32>) = 196,
    LoadAttrModule(Arg<u32>) = 197,
    LoadAttrNondescriptorNoDict(Arg<u32>) = 198,
    LoadAttrNondescriptorWithValues(Arg<u32>) = 199,
    LoadAttrProperty(Arg<u32>) = 200,
    LoadAttrSlot(Arg<u32>) = 201,
    LoadAttrWithHint(Arg<u32>) = 202,
    LoadGlobalBuiltin(Arg<u32>) = 203,
    LoadGlobalModule(Arg<u32>) = 204,
    LoadSuperAttrAttr(Arg<u32>) = 205,
    LoadSuperAttrMethod(Arg<u32>) = 206,
    ResumeCheck = 207,
    SendGen(Arg<u32>) = 208,
    StoreAttrInstanceValue = 209,
    StoreAttrSlot = 210,
    StoreAttrWithHint(Arg<u32>) = 211,
    StoreSubscrDict = 212,
    StoreSubscrListInt = 213,
    ToBoolAlwaysTrue = 214,
    ToBoolBool = 215,
    ToBoolInt = 216,
    ToBoolList = 217,
    ToBoolNone = 218,
    ToBoolStr = 219,
    UnpackSequenceList(Arg<u32>) = 220,
    UnpackSequenceTuple(Arg<u32>) = 221,
    UnpackSequenceTwoTuple(Arg<u32>) = 222,
    InstrumentedResume(Arg<u32>) = 236,
    InstrumentedEndFor = 237,
    InstrumentedEndSend = 238,
    InstrumentedReturnValue = 239,
    InstrumentedReturnConst(Arg<u32>) = 240,
    InstrumentedYieldValue(Arg<u32>) = 241,
    InstrumentedLoadSuperAttr(Arg<u32>) = 242,
    InstrumentedForIter(Arg<u32>) = 243,
    InstrumentedCall(Arg<u32>) = 244,
    InstrumentedCallKw(Arg<u32>) = 245,
    InstrumentedCallFunctionEx = 246,
    InstrumentedInstruction = 247,
    InstrumentedJumpForward(Arg<u32>) = 248,
    InstrumentedJumpBackward(Arg<u32>) = 249,
    InstrumentedPopJumpIfTrue(Arg<u32>) = 250,
    InstrumentedPopJumpIfFalse(Arg<u32>) = 251,
    InstrumentedPopJumpIfNone(Arg<u32>) = 252,
    InstrumentedPopJumpIfNotNone(Arg<u32>) = 253,
    Jump(Arg<u32>) = 256,
    JumpNoInterrupt(Arg<u32>) = 257,
    LoadClosure(Arg<u32>) = 258,
    LoadMethod(Arg<u32>) = 259,
    LoadSuperMethod(Arg<u32>) = 260,
    LoadZeroSuperAttr(Arg<u32>) = 261,
    LoadZeroSuperMethod(Arg<u32>) = 262,
    PopBlock = 263,
    SetupCleanup = 264,
    SetupFinally = 265,
    SetupWith = 266,
    StoreFastMaybeNull(Arg<u32>) = 267,
}

impl Instruction {
    /// Creates a new Instruction without validating that the `id` is valid before.
    #[must_use]
    pub const unsafe fn new_unchecked(id: u16) -> Self {
        // SAFETY: Caller responsibility.
        unsafe { std::mem::transmute::<u16, Self>(id) }
    }

    /// Whether the given ID matches one of the opcode IDs.
    #[must_use]
    pub const fn is_valid(id: u16) -> bool {
        matches!(id, 0..=118 | 149..=222 | 236..=253 | 256..=267)
    }

    /// Whether opcode is pseudo.
    #[must_use]
    pub const fn is_pseudo(&self) -> bool {
        matches!(
            self,
            Self::Jump(_)
                | Self::JumpNoInterrupt(_)
                | Self::LoadClosure(_)
                | Self::LoadMethod(_)
                | Self::LoadSuperMethod(_)
                | Self::LoadZeroSuperAttr(_)
                | Self::LoadZeroSuperMethod(_)
                | Self::PopBlock
                | Self::SetupCleanup
                | Self::SetupFinally
                | Self::SetupWith
                | Self::StoreFastMaybeNull(_)
        )
    }

    /// Whether opcode have 'HAS_ARG_FLAG' set.
    #[must_use]
    pub const fn has_arg(&self) -> bool {
        matches!(
            self,
            Self::BinaryOp(_)
                | Self::BuildConstKeyMap(_)
                | Self::BuildList(_)
                | Self::BuildMap(_)
                | Self::BuildSet(_)
                | Self::BuildSlice(_)
                | Self::BuildString(_)
                | Self::BuildTuple(_)
                | Self::Call(_)
                | Self::CallFunctionEx(_)
                | Self::CallIntrinsic1(_)
                | Self::CallIntrinsic2(_)
                | Self::CallKw(_)
                | Self::CompareOp(_)
                | Self::ContainsOp(_)
                | Self::ConvertValue(_)
                | Self::Copy(_)
                | Self::CopyFreeVars(_)
                | Self::DeleteAttr(_)
                | Self::DeleteDeref(_)
                | Self::DeleteFast(_)
                | Self::DeleteGlobal(_)
                | Self::DeleteName(_)
                | Self::DictMerge(_)
                | Self::DictUpdate(_)
                | Self::EnterExecutor(_)
                | Self::ExtendedArg(_)
                | Self::ForIter(_)
                | Self::GetAwaitable(_)
                | Self::ImportFrom(_)
                | Self::ImportName(_)
                | Self::IsOp(_)
                | Self::JumpBackward(_)
                | Self::JumpBackwardNoInterrupt(_)
                | Self::JumpForward(_)
                | Self::ListAppend(_)
                | Self::ListExtend(_)
                | Self::LoadAttr(_)
                | Self::LoadConst(_)
                | Self::LoadDeref(_)
                | Self::LoadFast(_)
                | Self::LoadFastAndClear(_)
                | Self::LoadFastCheck(_)
                | Self::LoadFastLoadFast(_)
                | Self::LoadFromDictOrDeref(_)
                | Self::LoadFromDictOrGlobals(_)
                | Self::LoadGlobal(_)
                | Self::LoadName(_)
                | Self::LoadSuperAttr(_)
                | Self::MakeCell(_)
                | Self::MapAdd(_)
                | Self::MatchClass(_)
                | Self::PopJumpIfFalse(_)
                | Self::PopJumpIfNone(_)
                | Self::PopJumpIfNotNone(_)
                | Self::PopJumpIfTrue(_)
                | Self::RaiseVarargs(_)
                | Self::Reraise(_)
                | Self::ReturnConst(_)
                | Self::Send(_)
                | Self::SetAdd(_)
                | Self::SetFunctionAttribute(_)
                | Self::SetUpdate(_)
                | Self::StoreAttr(_)
                | Self::StoreDeref(_)
                | Self::StoreFast(_)
                | Self::StoreFastLoadFast(_)
                | Self::StoreFastStoreFast(_)
                | Self::StoreGlobal(_)
                | Self::StoreName(_)
                | Self::Swap(_)
                | Self::UnpackEx(_)
                | Self::UnpackSequence(_)
                | Self::YieldValue(_)
                | Self::Resume(_)
                | Self::CallAllocAndEnterInit(_)
                | Self::CallBoundMethodExactArgs(_)
                | Self::CallBoundMethodGeneral(_)
                | Self::CallBuiltinClass(_)
                | Self::CallBuiltinFast(_)
                | Self::CallBuiltinFastWithKeywords(_)
                | Self::CallBuiltinO(_)
                | Self::CallIsinstance(_)
                | Self::CallLen(_)
                | Self::CallListAppend(_)
                | Self::CallMethodDescriptorFast(_)
                | Self::CallMethodDescriptorFastWithKeywords(_)
                | Self::CallMethodDescriptorNoargs(_)
                | Self::CallMethodDescriptorO(_)
                | Self::CallNonPyGeneral(_)
                | Self::CallPyExactArgs(_)
                | Self::CallPyGeneral(_)
                | Self::CallStr1(_)
                | Self::CallTuple1(_)
                | Self::CallType1(_)
                | Self::CompareOpFloat(_)
                | Self::CompareOpInt(_)
                | Self::CompareOpStr(_)
                | Self::ContainsOpDict(_)
                | Self::ContainsOpSet(_)
                | Self::ForIterGen(_)
                | Self::ForIterList(_)
                | Self::ForIterRange(_)
                | Self::ForIterTuple(_)
                | Self::LoadAttrClass(_)
                | Self::LoadAttrGetattributeOverridden(_)
                | Self::LoadAttrInstanceValue(_)
                | Self::LoadAttrMethodLazyDict(_)
                | Self::LoadAttrMethodNoDict(_)
                | Self::LoadAttrMethodWithValues(_)
                | Self::LoadAttrModule(_)
                | Self::LoadAttrNondescriptorNoDict(_)
                | Self::LoadAttrNondescriptorWithValues(_)
                | Self::LoadAttrProperty(_)
                | Self::LoadAttrSlot(_)
                | Self::LoadAttrWithHint(_)
                | Self::LoadGlobalBuiltin(_)
                | Self::LoadGlobalModule(_)
                | Self::LoadSuperAttrAttr(_)
                | Self::LoadSuperAttrMethod(_)
                | Self::SendGen(_)
                | Self::StoreAttrWithHint(_)
                | Self::UnpackSequenceList(_)
                | Self::UnpackSequenceTuple(_)
                | Self::UnpackSequenceTwoTuple(_)
                | Self::InstrumentedResume(_)
                | Self::InstrumentedReturnConst(_)
                | Self::InstrumentedYieldValue(_)
                | Self::InstrumentedLoadSuperAttr(_)
                | Self::InstrumentedForIter(_)
                | Self::InstrumentedCall(_)
                | Self::InstrumentedCallKw(_)
                | Self::InstrumentedJumpForward(_)
                | Self::InstrumentedJumpBackward(_)
                | Self::InstrumentedPopJumpIfTrue(_)
                | Self::InstrumentedPopJumpIfFalse(_)
                | Self::InstrumentedPopJumpIfNone(_)
                | Self::InstrumentedPopJumpIfNotNone(_)
                | Self::Jump(_)
                | Self::JumpNoInterrupt(_)
                | Self::LoadClosure(_)
                | Self::LoadMethod(_)
                | Self::LoadSuperMethod(_)
                | Self::LoadZeroSuperAttr(_)
                | Self::LoadZeroSuperMethod(_)
                | Self::SetupCleanup
                | Self::SetupFinally
                | Self::SetupWith
                | Self::StoreFastMaybeNull(_)
        )
    }

    /// Whether opcode have 'HAS_CONST_FLAG' set.
    #[must_use]
    pub const fn has_const(&self) -> bool {
        matches!(
            self,
            Self::LoadConst(_) | Self::ReturnConst(_) | Self::InstrumentedReturnConst(_)
        )
    }

    /// Whether opcode have 'HAS_NAME_FLAG' set.
    #[must_use]
    pub const fn has_name(&self) -> bool {
        matches!(
            self,
            Self::DeleteAttr(_)
                | Self::DeleteGlobal(_)
                | Self::DeleteName(_)
                | Self::ImportFrom(_)
                | Self::ImportName(_)
                | Self::LoadAttr(_)
                | Self::LoadFromDictOrGlobals(_)
                | Self::LoadGlobal(_)
                | Self::LoadName(_)
                | Self::LoadSuperAttr(_)
                | Self::StoreAttr(_)
                | Self::StoreGlobal(_)
                | Self::StoreName(_)
                | Self::LoadAttrGetattributeOverridden(_)
                | Self::LoadAttrWithHint(_)
                | Self::LoadSuperAttrAttr(_)
                | Self::LoadSuperAttrMethod(_)
                | Self::StoreAttrWithHint(_)
                | Self::LoadMethod(_)
                | Self::LoadSuperMethod(_)
                | Self::LoadZeroSuperAttr(_)
                | Self::LoadZeroSuperMethod(_)
        )
    }

    /// Whether opcode have 'HAS_JUMP_FLAG' set.
    #[must_use]
    pub const fn has_jump(&self) -> bool {
        matches!(
            self,
            Self::ForIter(_)
                | Self::JumpBackward(_)
                | Self::JumpBackwardNoInterrupt(_)
                | Self::JumpForward(_)
                | Self::PopJumpIfFalse(_)
                | Self::PopJumpIfNone(_)
                | Self::PopJumpIfNotNone(_)
                | Self::PopJumpIfTrue(_)
                | Self::Send(_)
                | Self::ForIterList(_)
                | Self::ForIterRange(_)
                | Self::ForIterTuple(_)
                | Self::Jump(_)
                | Self::JumpNoInterrupt(_)
        )
    }

    /// Whether opcode have 'HAS_FREE_FLAG' set.
    #[must_use]
    pub const fn has_free(&self) -> bool {
        matches!(
            self,
            Self::DeleteDeref(_)
                | Self::LoadDeref(_)
                | Self::LoadFromDictOrDeref(_)
                | Self::MakeCell(_)
                | Self::StoreDeref(_)
        )
    }

    /// Whether opcode have 'HAS_LOCAL_FLAG' set.
    #[must_use]
    pub const fn has_local(&self) -> bool {
        matches!(
            self,
            Self::BinaryOpInplaceAddUnicode
                | Self::DeleteFast(_)
                | Self::LoadFast(_)
                | Self::LoadFastAndClear(_)
                | Self::LoadFastCheck(_)
                | Self::LoadFastLoadFast(_)
                | Self::StoreFast(_)
                | Self::StoreFastLoadFast(_)
                | Self::StoreFastStoreFast(_)
                | Self::LoadClosure(_)
                | Self::StoreFastMaybeNull(_)
        )
    }

    /// Whether opcode have 'HAS_PURE_FLAG' set.
    #[must_use]
    pub const fn has_exc(&self) -> bool {
        matches!(
            self,
            Self::EndFor
                | Self::EndSend
                | Self::Nop
                | Self::PopTop
                | Self::PushNull
                | Self::UnaryNot
                | Self::Copy(_)
                | Self::LoadConst(_)
                | Self::LoadFast(_)
                | Self::Swap(_)
                | Self::LoadClosure(_)
                | Self::PopBlock
                | Self::SetupCleanup
                | Self::SetupFinally
                | Self::SetupWith
        )
    }

    /// How many items should be popped from the stack.
    const fn num_popped(&self) {
        match &self {
            Self::Cache => 0,
            Self::BeforeAsyncWith => 1,
            Self::BeforeWith => 1,
            Self::BinaryOpInplaceAddUnicode => 2,
            Self::BinarySlice => 3,
            Self::BinarySubscr => 2,
            Self::CheckEgMatch => 2,
            Self::CheckExcMatch => 2,
            Self::CleanupThrow => 3,
            Self::DeleteSubscr => 2,
            Self::EndAsyncFor => 2,
            Self::EndFor => 1,
            Self::EndSend => 2,
            Self::ExitInitCheck => 1,
            Self::FormatSimple => 1,
            Self::FormatWithSpec => 2,
            Self::GetAiter => 1,
            Self::Reserved => 0,
            Self::GetAnext => 1,
            Self::GetIter => 1,
            Self::GetLen => 1,
            Self::GetYieldFromIter => 1,
            Self::InterpreterExit => 1,
            Self::LoadAssertionError => 0,
            Self::LoadBuildClass => 0,
            Self::LoadLocals => 0,
            Self::MakeFunction => 1,
            Self::MatchKeys => 2,
            Self::MatchMapping => 1,
            Self::MatchSequence => 1,
            Self::Nop => 0,
            Self::PopExcept => 1,
            Self::PopTop => 1,
            Self::PushExcInfo => 1,
            Self::PushNull => 0,
            Self::ReturnGenerator => 0,
            Self::ReturnValue => 1,
            Self::SetupAnnotations => 0,
            Self::StoreSlice => 4,
            Self::StoreSubscr => 3,
            Self::ToBool => 1,
            Self::UnaryInvert => 1,
            Self::UnaryNegative => 1,
            Self::UnaryNot => 1,
            Self::WithExceptStart => 4,
            Self::BinaryOp(_) => 2,
            Self::BuildConstKeyMap(oparg) => 1 + oparg,
            Self::BuildList(oparg) => oparg,
            Self::BuildMap(oparg) => oparg * 2,
            Self::BuildSet(oparg) => oparg,
            Self::BuildSlice(oparg) => 2 + (if (oparg == 3) { 1 } else { 0 }),
            Self::BuildString(oparg) => oparg,
            Self::BuildTuple(oparg) => oparg,
            Self::Call(oparg) => 2 + oparg,
            Self::CallFunctionEx(oparg) => 3 + (oparg & 1),
            Self::CallIntrinsic1(_) => 1,
            Self::CallIntrinsic2(_) => 2,
            Self::CallKw(oparg) => 3 + oparg,
            Self::CompareOp(_) => 2,
            Self::ContainsOp(_) => 2,
            Self::ConvertValue(_) => 1,
            Self::Copy(oparg) => 1 + (oparg - 1),
            Self::CopyFreeVars(_) => 0,
            Self::DeleteAttr(_) => 1,
            Self::DeleteDeref(_) => 0,
            Self::DeleteFast(_) => 0,
            Self::DeleteGlobal(_) => 0,
            Self::DeleteName(_) => 0,
            Self::DictMerge(oparg) => 5 + (oparg - 1),
            Self::DictUpdate(oparg) => 2 + (oparg - 1),
            Self::EnterExecutor(_) => 0,
            Self::ExtendedArg(_) => 0,
            Self::ForIter(_) => 1,
            Self::GetAwaitable(_) => 1,
            Self::ImportFrom(_) => 1,
            Self::ImportName(_) => 2,
            Self::IsOp(_) => 2,
            Self::JumpBackward(_) => 0,
            Self::JumpBackwardNoInterrupt(_) => 0,
            Self::JumpForward(_) => 0,
            Self::ListAppend(oparg) => 2 + (oparg - 1),
            Self::ListExtend(oparg) => 2 + (oparg - 1),
            Self::LoadAttr(_) => 1,
            Self::LoadConst(_) => 0,
            Self::LoadDeref(_) => 0,
            Self::LoadFast(_) => 0,
            Self::LoadFastAndClear(_) => 0,
            Self::LoadFastCheck(_) => 0,
            Self::LoadFastLoadFast(_) => 0,
            Self::LoadFromDictOrDeref(_) => 1,
            Self::LoadFromDictOrGlobals(_) => 1,
            Self::LoadGlobal(_) => 0,
            Self::LoadName(_) => 0,
            Self::LoadSuperAttr(_) => 3,
            Self::MakeCell(_) => 0,
            Self::MapAdd(oparg) => 3 + (oparg - 1),
            Self::MatchClass(_) => 3,
            Self::PopJumpIfFalse(_) => 1,
            Self::PopJumpIfNone(_) => 1,
            Self::PopJumpIfNotNone(_) => 1,
            Self::PopJumpIfTrue(_) => 1,
            Self::RaiseVarargs(oparg) => oparg,
            Self::Reraise(oparg) => 1 + oparg,
            Self::ReturnConst(_) => 0,
            Self::Send(_) => 2,
            Self::SetAdd(oparg) => 2 + (oparg - 1),
            Self::SetFunctionAttribute(_) => 2,
            Self::SetUpdate(oparg) => 2 + (oparg - 1),
            Self::StoreAttr(_) => 2,
            Self::StoreDeref(_) => 1,
            Self::StoreFast(_) => 1,
            Self::StoreFastLoadFast(_) => 1,
            Self::StoreFastStoreFast(_) => 2,
            Self::StoreGlobal(_) => 1,
            Self::StoreName(_) => 1,
            Self::Swap(oparg) => 2 + (oparg - 2),
            Self::UnpackEx(_) => 1,
            Self::UnpackSequence(_) => 1,
            Self::YieldValue(_) => 1,
            Self::Resume(_) => 0,
            Self::BinaryOpAddFloat => 2,
            Self::BinaryOpAddInt => 2,
            Self::BinaryOpAddUnicode => 2,
            Self::BinaryOpMultiplyFloat => 2,
            Self::BinaryOpMultiplyInt => 2,
            Self::BinaryOpSubtractFloat => 2,
            Self::BinaryOpSubtractInt => 2,
            Self::BinarySubscrDict => 2,
            Self::BinarySubscrGetitem => 2,
            Self::BinarySubscrListInt => 2,
            Self::BinarySubscrStrInt => 2,
            Self::BinarySubscrTupleInt => 2,
            Self::CallAllocAndEnterInit(oparg) => 2 + oparg,
            Self::CallBoundMethodExactArgs(oparg) => 2 + oparg,
            Self::CallBoundMethodGeneral(oparg) => 2 + oparg,
            Self::CallBuiltinClass(oparg) => 2 + oparg,
            Self::CallBuiltinFast(oparg) => 2 + oparg,
            Self::CallBuiltinFastWithKeywords(oparg) => 2 + oparg,
            Self::CallBuiltinO(oparg) => 2 + oparg,
            Self::CallIsinstance(oparg) => 2 + oparg,
            Self::CallLen(oparg) => 2 + oparg,
            Self::CallListAppend(_) => 3,
            Self::CallMethodDescriptorFast(oparg) => 2 + oparg,
            Self::CallMethodDescriptorFastWithKeywords(oparg) => 2 + oparg,
            Self::CallMethodDescriptorNoargs(oparg) => 2 + oparg,
            Self::CallMethodDescriptorO(oparg) => 2 + oparg,
            Self::CallNonPyGeneral(oparg) => 2 + oparg,
            Self::CallPyExactArgs(oparg) => 2 + oparg,
            Self::CallPyGeneral(oparg) => 2 + oparg,
            Self::CallStr1(_) => 3,
            Self::CallTuple1(_) => 3,
            Self::CallType1(_) => 3,
            Self::CompareOpFloat(_) => 2,
            Self::CompareOpInt(_) => 2,
            Self::CompareOpStr(_) => 2,
            Self::ContainsOpDict(_) => 2,
            Self::ContainsOpSet(_) => 2,
            Self::ForIterGen(_) => 1,
            Self::ForIterList(_) => 1,
            Self::ForIterRange(_) => 1,
            Self::ForIterTuple(_) => 1,
            Self::LoadAttrClass(_) => 1,
            Self::LoadAttrGetattributeOverridden(_) => 1,
            Self::LoadAttrInstanceValue(_) => 1,
            Self::LoadAttrMethodLazyDict(_) => 1,
            Self::LoadAttrMethodNoDict(_) => 1,
            Self::LoadAttrMethodWithValues(_) => 1,
            Self::LoadAttrModule(_) => 1,
            Self::LoadAttrNondescriptorNoDict(_) => 1,
            Self::LoadAttrNondescriptorWithValues(_) => 1,
            Self::LoadAttrProperty(_) => 1,
            Self::LoadAttrSlot(_) => 1,
            Self::LoadAttrWithHint(_) => 1,
            Self::LoadGlobalBuiltin(_) => 0,
            Self::LoadGlobalModule(_) => 0,
            Self::LoadSuperAttrAttr(_) => 3,
            Self::LoadSuperAttrMethod(_) => 3,
            Self::ResumeCheck => 0,
            Self::SendGen(_) => 2,
            Self::StoreAttrInstanceValue => 2,
            Self::StoreAttrSlot => 2,
            Self::StoreAttrWithHint(_) => 2,
            Self::StoreSubscrDict => 3,
            Self::StoreSubscrListInt => 3,
            Self::ToBoolAlwaysTrue => 1,
            Self::ToBoolBool => 1,
            Self::ToBoolInt => 1,
            Self::ToBoolList => 1,
            Self::ToBoolNone => 1,
            Self::ToBoolStr => 1,
            Self::UnpackSequenceList(_) => 1,
            Self::UnpackSequenceTuple(_) => 1,
            Self::UnpackSequenceTwoTuple(_) => 1,
            Self::InstrumentedResume(_) => 0,
            Self::InstrumentedEndFor => 2,
            Self::InstrumentedEndSend => 2,
            Self::InstrumentedReturnValue => 1,
            Self::InstrumentedReturnConst(_) => 0,
            Self::InstrumentedYieldValue(_) => 1,
            Self::InstrumentedLoadSuperAttr(_) => 3,
            Self::InstrumentedForIter(_) => 0,
            Self::InstrumentedCall(_) => 0,
            Self::InstrumentedCallKw(_) => 0,
            Self::InstrumentedCallFunctionEx => 0,
            Self::InstrumentedInstruction => 0,
            Self::InstrumentedJumpForward(_) => 0,
            Self::InstrumentedJumpBackward(_) => 0,
            Self::InstrumentedPopJumpIfTrue(_) => 0,
            Self::InstrumentedPopJumpIfFalse(_) => 0,
            Self::InstrumentedPopJumpIfNone(_) => 0,
            Self::InstrumentedPopJumpIfNotNone(_) => 0,
            _ => panic!("Pseudo opcodes are not allowed!"),
        }
    }

    /// How many items should be pushed on the stack.
    const fn num_pushed(&self) {
        match &self {
            Self::Cache => 0,
            Self::BeforeAsyncWith => 2,
            Self::BeforeWith => 2,
            Self::BinaryOpInplaceAddUnicode => 0,
            Self::BinarySlice => 1,
            Self::BinarySubscr => 1,
            Self::CheckEgMatch => 2,
            Self::CheckExcMatch => 2,
            Self::CleanupThrow => 2,
            Self::DeleteSubscr => 0,
            Self::EndAsyncFor => 0,
            Self::EndFor => 0,
            Self::EndSend => 1,
            Self::ExitInitCheck => 0,
            Self::FormatSimple => 1,
            Self::FormatWithSpec => 1,
            Self::GetAiter => 1,
            Self::Reserved => 0,
            Self::GetAnext => 2,
            Self::GetIter => 1,
            Self::GetLen => 2,
            Self::GetYieldFromIter => 1,
            Self::InterpreterExit => 0,
            Self::LoadAssertionError => 1,
            Self::LoadBuildClass => 1,
            Self::LoadLocals => 1,
            Self::MakeFunction => 1,
            Self::MatchKeys => 3,
            Self::MatchMapping => 2,
            Self::MatchSequence => 2,
            Self::Nop => 0,
            Self::PopExcept => 0,
            Self::PopTop => 0,
            Self::PushExcInfo => 2,
            Self::PushNull => 1,
            Self::ReturnGenerator => 1,
            Self::ReturnValue => 0,
            Self::SetupAnnotations => 0,
            Self::StoreSlice => 0,
            Self::StoreSubscr => 0,
            Self::ToBool => 1,
            Self::UnaryInvert => 1,
            Self::UnaryNegative => 1,
            Self::UnaryNot => 1,
            Self::WithExceptStart => 5,
            Self::BinaryOp(_) => 1,
            Self::BuildConstKeyMap(_) => 1,
            Self::BuildList(_) => 1,
            Self::BuildMap(_) => 1,
            Self::BuildSet(_) => 1,
            Self::BuildSlice(_) => 1,
            Self::BuildString(_) => 1,
            Self::BuildTuple(_) => 1,
            Self::Call(_) => 1,
            Self::CallFunctionEx(_) => 1,
            Self::CallIntrinsic1(_) => 1,
            Self::CallIntrinsic2(_) => 1,
            Self::CallKw(_) => 1,
            Self::CompareOp(_) => 1,
            Self::ContainsOp(_) => 1,
            Self::ConvertValue(_) => 1,
            Self::Copy(oparg) => 2 + (oparg - 1),
            Self::CopyFreeVars(_) => 0,
            Self::DeleteAttr(_) => 0,
            Self::DeleteDeref(_) => 0,
            Self::DeleteFast(_) => 0,
            Self::DeleteGlobal(_) => 0,
            Self::DeleteName(_) => 0,
            Self::DictMerge(oparg) => 4 + (oparg - 1),
            Self::DictUpdate(oparg) => 1 + (oparg - 1),
            Self::EnterExecutor(_) => 0,
            Self::ExtendedArg(_) => 0,
            Self::ForIter(_) => 2,
            Self::GetAwaitable(_) => 1,
            Self::ImportFrom(_) => 2,
            Self::ImportName(_) => 1,
            Self::IsOp(_) => 1,
            Self::JumpBackward(_) => 0,
            Self::JumpBackwardNoInterrupt(_) => 0,
            Self::JumpForward(_) => 0,
            Self::ListAppend(oparg) => 1 + (oparg - 1),
            Self::ListExtend(oparg) => 1 + (oparg - 1),
            Self::LoadAttr(oparg) => 1 + (oparg & 1),
            Self::LoadConst(_) => 1,
            Self::LoadDeref(_) => 1,
            Self::LoadFast(_) => 1,
            Self::LoadFastAndClear(_) => 1,
            Self::LoadFastCheck(_) => 1,
            Self::LoadFastLoadFast(_) => 2,
            Self::LoadFromDictOrDeref(_) => 1,
            Self::LoadFromDictOrGlobals(_) => 1,
            Self::LoadGlobal(oparg) => 1 + (oparg & 1),
            Self::LoadName(_) => 1,
            Self::LoadSuperAttr(oparg) => 1 + (oparg & 1),
            Self::MakeCell(_) => 0,
            Self::MapAdd(oparg) => 1 + (oparg - 1),
            Self::MatchClass(_) => 1,
            Self::PopJumpIfFalse(_) => 0,
            Self::PopJumpIfNone(_) => 0,
            Self::PopJumpIfNotNone(_) => 0,
            Self::PopJumpIfTrue(_) => 0,
            Self::RaiseVarargs(_) => 0,
            Self::Reraise(oparg) => oparg,
            Self::ReturnConst(_) => 0,
            Self::Send(_) => 2,
            Self::SetAdd(oparg) => 1 + (oparg - 1),
            Self::SetFunctionAttribute(_) => 1,
            Self::SetUpdate(oparg) => 1 + (oparg - 1),
            Self::StoreAttr(_) => 0,
            Self::StoreDeref(_) => 0,
            Self::StoreFast(_) => 0,
            Self::StoreFastLoadFast(_) => 1,
            Self::StoreFastStoreFast(_) => 0,
            Self::StoreGlobal(_) => 0,
            Self::StoreName(_) => 0,
            Self::Swap(oparg) => 2 + (oparg - 2),
            Self::UnpackEx(oparg) => 1 + (oparg >> 8) + (oparg & 0xFF),
            Self::UnpackSequence(oparg) => oparg,
            Self::YieldValue(_) => 1,
            Self::Resume(_) => 0,
            Self::BinaryOpAddFloat => 1,
            Self::BinaryOpAddInt => 1,
            Self::BinaryOpAddUnicode => 1,
            Self::BinaryOpMultiplyFloat => 1,
            Self::BinaryOpMultiplyInt => 1,
            Self::BinaryOpSubtractFloat => 1,
            Self::BinaryOpSubtractInt => 1,
            Self::BinarySubscrDict => 1,
            Self::BinarySubscrGetitem => 1,
            Self::BinarySubscrListInt => 1,
            Self::BinarySubscrStrInt => 1,
            Self::BinarySubscrTupleInt => 1,
            Self::CallAllocAndEnterInit(_) => 1,
            Self::CallBoundMethodExactArgs(_) => 0,
            Self::CallBoundMethodGeneral(_) => 0,
            Self::CallBuiltinClass(_) => 1,
            Self::CallBuiltinFast(_) => 1,
            Self::CallBuiltinFastWithKeywords(_) => 1,
            Self::CallBuiltinO(_) => 1,
            Self::CallIsinstance(_) => 1,
            Self::CallLen(_) => 1,
            Self::CallListAppend(_) => 1,
            Self::CallMethodDescriptorFast(_) => 1,
            Self::CallMethodDescriptorFastWithKeywords(_) => 1,
            Self::CallMethodDescriptorNoargs(_) => 1,
            Self::CallMethodDescriptorO(_) => 1,
            Self::CallNonPyGeneral(_) => 1,
            Self::CallPyExactArgs(_) => 0,
            Self::CallPyGeneral(_) => 0,
            Self::CallStr1(_) => 1,
            Self::CallTuple1(_) => 1,
            Self::CallType1(_) => 1,
            Self::CompareOpFloat(_) => 1,
            Self::CompareOpInt(_) => 1,
            Self::CompareOpStr(_) => 1,
            Self::ContainsOpDict(_) => 1,
            Self::ContainsOpSet(_) => 1,
            Self::ForIterGen(_) => 1,
            Self::ForIterList(_) => 2,
            Self::ForIterRange(_) => 2,
            Self::ForIterTuple(_) => 2,
            Self::LoadAttrClass(oparg) => 1 + (oparg & 1),
            Self::LoadAttrGetattributeOverridden(_) => 1,
            Self::LoadAttrInstanceValue(oparg) => 1 + (oparg & 1),
            Self::LoadAttrMethodLazyDict(_) => 2,
            Self::LoadAttrMethodNoDict(_) => 2,
            Self::LoadAttrMethodWithValues(_) => 2,
            Self::LoadAttrModule(oparg) => 1 + (oparg & 1),
            Self::LoadAttrNondescriptorNoDict(_) => 1,
            Self::LoadAttrNondescriptorWithValues(_) => 1,
            Self::LoadAttrProperty(_) => 1,
            Self::LoadAttrSlot(oparg) => 1 + (oparg & 1),
            Self::LoadAttrWithHint(oparg) => 1 + (oparg & 1),
            Self::LoadGlobalBuiltin(oparg) => 1 + (oparg & 1),
            Self::LoadGlobalModule(oparg) => 1 + (oparg & 1),
            Self::LoadSuperAttrAttr(_) => 1,
            Self::LoadSuperAttrMethod(_) => 2,
            Self::ResumeCheck => 0,
            Self::SendGen(_) => 2,
            Self::StoreAttrInstanceValue => 0,
            Self::StoreAttrSlot => 0,
            Self::StoreAttrWithHint(_) => 0,
            Self::StoreSubscrDict => 0,
            Self::StoreSubscrListInt => 0,
            Self::ToBoolAlwaysTrue => 1,
            Self::ToBoolBool => 1,
            Self::ToBoolInt => 1,
            Self::ToBoolList => 1,
            Self::ToBoolNone => 1,
            Self::ToBoolStr => 1,
            Self::UnpackSequenceList(oparg) => oparg,
            Self::UnpackSequenceTuple(oparg) => oparg,
            Self::UnpackSequenceTwoTuple(_) => 2,
            Self::InstrumentedResume(_) => 0,
            Self::InstrumentedEndFor => 1,
            Self::InstrumentedEndSend => 1,
            Self::InstrumentedReturnValue => 0,
            Self::InstrumentedReturnConst(_) => 0,
            Self::InstrumentedYieldValue(_) => 1,
            Self::InstrumentedLoadSuperAttr(oparg) => 1 + (oparg & 1),
            Self::InstrumentedForIter(_) => 0,
            Self::InstrumentedCall(_) => 0,
            Self::InstrumentedCallKw(_) => 0,
            Self::InstrumentedCallFunctionEx => 0,
            Self::InstrumentedInstruction => 0,
            Self::InstrumentedJumpForward(_) => 0,
            Self::InstrumentedJumpBackward(_) => 0,
            Self::InstrumentedPopJumpIfTrue(_) => 0,
            Self::InstrumentedPopJumpIfFalse(_) => 0,
            Self::InstrumentedPopJumpIfNone(_) => 0,
            Self::InstrumentedPopJumpIfNotNone(_) => 0,
            _ => panic!("Pseudo opcodes are not allowed!"),
        }
    }
}

impl TryFrom<u16> for Instruction {
    type Error = crate::marshal::MarshalError;

    fn try_from(id: u16) -> Result<Self, Self::Error> {
        if Self::is_valid(id) {
            Ok(Self::new_unchecked(id))
        } else {
            Err(Self::Error::InvalidBytecode)
        }
    }
}
