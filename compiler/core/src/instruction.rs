///! Python opcode implementation. Currently aligned with cpython 3.13.7

// This file is generated by scripts/gen_instructions.py
// Do not edit!

/// A Single bytecode instruction.
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(u16)]
pub enum Instruction {
    Cache = 0,
    BeforeAsyncWith = 1,
    BeforeWith = 2,
    BinaryOpInplaceAddUnicode = 3,
    BinarySlice = 4,
    BinarySubscr = 5,
    CheckEgMatch = 6,
    CheckExcMatch = 7,
    CleanupThrow = 8,
    DeleteSubscr = 9,
    EndAsyncFor = 10,
    EndFor = 11,
    EndSend = 12,
    ExitInitCheck = 13,
    FormatSimple = 14,
    FormatWithSpec = 15,
    GetAiter = 16,
    Reserved = 17,
    GetAnext = 18,
    GetIter = 19,
    GetLen = 20,
    GetYieldFromIter = 21,
    InterpreterExit = 22,
    LoadAssertionError = 23,
    LoadBuildClass = 24,
    LoadLocals = 25,
    MakeFunction = 26,
    MatchKeys = 27,
    MatchMapping = 28,
    MatchSequence = 29,
    Nop = 30,
    PopExcept = 31,
    PopTop = 32,
    PushExcInfo = 33,
    PushNull = 34,
    ReturnGenerator = 35,
    ReturnValue = 36,
    SetupAnnotations = 37,
    StoreSlice = 38,
    StoreSubscr = 39,
    ToBool = 40,
    UnaryInvert = 41,
    UnaryNegative = 42,
    UnaryNot = 43,
    WithExceptStart = 44,
    BinaryOp = 45,
    BuildConstKeyMap { index: Arg<u32> } = 46,
    BuildList { index: Arg<u32> } = 47,
    BuildMap { index: Arg<u32> } = 48,
    BuildSet { index: Arg<u32> } = 49,
    BuildSlice { index: Arg<u32> } = 50,
    BuildString { index: Arg<u32> } = 51,
    BuildTuple { index: Arg<u32> } = 52,
    Call = 53,
    CallFunctionEx { index: Arg<u32> } = 54,
    CallIntrinsic1 { index: Arg<u32> } = 55,
    CallIntrinsic2 { index: Arg<u32> } = 56,
    CallKw { index: Arg<u32> } = 57,
    CompareOp = 58,
    ContainsOp = 59,
    ConvertValue { index: Arg<u32> } = 60,
    Copy { index: Arg<u32> } = 61,
    CopyFreeVars { index: Arg<u32> } = 62,
    DeleteAttr { index: Arg<u32> } = 63,
    DeleteDeref { index: Arg<u32> } = 64,
    DeleteFast { index: Arg<u32> } = 65,
    DeleteGlobal { index: Arg<u32> } = 66,
    DeleteName { index: Arg<u32> } = 67,
    DictMerge { index: Arg<u32> } = 68,
    DictUpdate { index: Arg<u32> } = 69,
    EnterExecutor { index: Arg<u32> } = 70,
    ExtendedArg { index: Arg<u32> } = 71,
    ForIter = 72,
    GetAwaitable { index: Arg<u32> } = 73,
    ImportFrom { index: Arg<u32> } = 74,
    ImportName { index: Arg<u32> } = 75,
    IsOp { index: Arg<u32> } = 76,
    JumpBackward = 77,
    JumpBackwardNoInterrupt { index: Arg<u32> } = 78,
    JumpForward { index: Arg<u32> } = 79,
    ListAppend { index: Arg<u32> } = 80,
    ListExtend { index: Arg<u32> } = 81,
    LoadAttr = 82,
    LoadConst { index: Arg<u32> } = 83,
    LoadDeref { index: Arg<u32> } = 84,
    LoadFast { index: Arg<u32> } = 85,
    LoadFastAndClear { index: Arg<u32> } = 86,
    LoadFastCheck { index: Arg<u32> } = 87,
    LoadFastLoadFast { index: Arg<u32> } = 88,
    LoadFromDictOrDeref { index: Arg<u32> } = 89,
    LoadFromDictOrGlobals { index: Arg<u32> } = 90,
    LoadGlobal = 91,
    LoadName { index: Arg<u32> } = 92,
    LoadSuperAttr = 93,
    MakeCell { index: Arg<u32> } = 94,
    MapAdd { index: Arg<u32> } = 95,
    MatchClass { index: Arg<u32> } = 96,
    PopJumpIfFalse = 97,
    PopJumpIfNone = 98,
    PopJumpIfNotNone = 99,
    PopJumpIfTrue = 100,
    RaiseVarargs { index: Arg<u32> } = 101,
    Reraise { index: Arg<u32> } = 102,
    ReturnConst { index: Arg<u32> } = 103,
    Send = 104,
    SetAdd { index: Arg<u32> } = 105,
    SetFunctionAttribute { index: Arg<u32> } = 106,
    SetUpdate { index: Arg<u32> } = 107,
    StoreAttr = 108,
    StoreDeref { index: Arg<u32> } = 109,
    StoreFast { index: Arg<u32> } = 110,
    StoreFastLoadFast { index: Arg<u32> } = 111,
    StoreFastStoreFast { index: Arg<u32> } = 112,
    StoreGlobal { index: Arg<u32> } = 113,
    StoreName { index: Arg<u32> } = 114,
    Swap { index: Arg<u32> } = 115,
    UnpackEx { index: Arg<u32> } = 116,
    UnpackSequence = 117,
    YieldValue { index: Arg<u32> } = 118,
    Resume { index: Arg<u32> } = 149,
    BinaryOpAddFloat = 150,
    BinaryOpAddInt = 151,
    BinaryOpAddUnicode = 152,
    BinaryOpMultiplyFloat = 153,
    BinaryOpMultiplyInt = 154,
    BinaryOpSubtractFloat = 155,
    BinaryOpSubtractInt = 156,
    BinarySubscrDict = 157,
    BinarySubscrGetitem = 158,
    BinarySubscrListInt = 159,
    BinarySubscrStrInt = 160,
    BinarySubscrTupleInt = 161,
    CallAllocAndEnterInit = 162,
    CallBoundMethodExactArgs = 163,
    CallBoundMethodGeneral = 164,
    CallBuiltinClass = 165,
    CallBuiltinFast = 166,
    CallBuiltinFastWithKeywords = 167,
    CallBuiltinO = 168,
    CallIsinstance = 169,
    CallLen = 170,
    CallListAppend = 171,
    CallMethodDescriptorFast = 172,
    CallMethodDescriptorFastWithKeywords = 173,
    CallMethodDescriptorNoargs = 174,
    CallMethodDescriptorO = 175,
    CallNonPyGeneral = 176,
    CallPyExactArgs = 177,
    CallPyGeneral = 178,
    CallStr1 = 179,
    CallTuple1 = 180,
    CallType1 = 181,
    CompareOpFloat = 182,
    CompareOpInt = 183,
    CompareOpStr = 184,
    ContainsOpDict = 185,
    ContainsOpSet = 186,
    ForIterGen = 187,
    ForIterList = 188,
    ForIterRange = 189,
    ForIterTuple = 190,
    LoadAttrClass = 191,
    LoadAttrGetattributeOverridden = 192,
    LoadAttrInstanceValue = 193,
    LoadAttrMethodLazyDict = 194,
    LoadAttrMethodNoDict = 195,
    LoadAttrMethodWithValues = 196,
    LoadAttrModule = 197,
    LoadAttrNondescriptorNoDict = 198,
    LoadAttrNondescriptorWithValues = 199,
    LoadAttrProperty = 200,
    LoadAttrSlot = 201,
    LoadAttrWithHint = 202,
    LoadGlobalBuiltin = 203,
    LoadGlobalModule = 204,
    LoadSuperAttrAttr = 205,
    LoadSuperAttrMethod = 206,
    ResumeCheck = 207,
    SendGen = 208,
    StoreAttrInstanceValue = 209,
    StoreAttrSlot = 210,
    StoreAttrWithHint = 211,
    StoreSubscrDict = 212,
    StoreSubscrListInt = 213,
    ToBoolAlwaysTrue = 214,
    ToBoolBool = 215,
    ToBoolInt = 216,
    ToBoolList = 217,
    ToBoolNone = 218,
    ToBoolStr = 219,
    UnpackSequenceList = 220,
    UnpackSequenceTuple = 221,
    UnpackSequenceTwoTuple = 222,
    InstrumentedResume { index: Arg<u32> } = 236,
    InstrumentedEndFor = 237,
    InstrumentedEndSend = 238,
    InstrumentedReturnValue = 239,
    InstrumentedReturnConst { index: Arg<u32> } = 240,
    InstrumentedYieldValue { index: Arg<u32> } = 241,
    InstrumentedLoadSuperAttr = 242,
    InstrumentedForIter = 243,
    InstrumentedCall = 244,
    InstrumentedCallKw { index: Arg<u32> } = 245,
    InstrumentedCallFunctionEx = 246,
    InstrumentedInstruction = 247,
    InstrumentedJumpForward { index: Arg<u32> } = 248,
    InstrumentedJumpBackward = 249,
    InstrumentedPopJumpIfTrue = 250,
    InstrumentedPopJumpIfFalse = 251,
    InstrumentedPopJumpIfNone = 252,
    InstrumentedPopJumpIfNotNone = 253
}
