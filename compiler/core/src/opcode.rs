//! Python opcode implementation. Currently aligned with cpython 3.13.7

// This file is generated by scripts/gen_opcodes.py
// Do not edit!

/// Represents a valid opcode ID.
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub struct OpcodeId(u16);

impl OpcodeId {
    pub const BEFORE_ASYNC_WITH: Self = unsafe { Self::new_unchecked(1) };
    pub const BEFORE_WITH: Self = unsafe { Self::new_unchecked(2) };
    pub const BINARY_OP: Self = unsafe { Self::new_unchecked(45) };
    pub const BINARY_OP_ADD_FLOAT: Self = unsafe { Self::new_unchecked(150) };
    pub const BINARY_OP_ADD_INT: Self = unsafe { Self::new_unchecked(151) };
    pub const BINARY_OP_ADD_UNICODE: Self = unsafe { Self::new_unchecked(152) };
    pub const BINARY_OP_INPLACE_ADD_UNICODE: Self = unsafe { Self::new_unchecked(3) };
    pub const BINARY_OP_MULTIPLY_FLOAT: Self = unsafe { Self::new_unchecked(153) };
    pub const BINARY_OP_MULTIPLY_INT: Self = unsafe { Self::new_unchecked(154) };
    pub const BINARY_OP_SUBTRACT_FLOAT: Self = unsafe { Self::new_unchecked(155) };
    pub const BINARY_OP_SUBTRACT_INT: Self = unsafe { Self::new_unchecked(156) };
    pub const BINARY_SLICE: Self = unsafe { Self::new_unchecked(4) };
    pub const BINARY_SUBSCR: Self = unsafe { Self::new_unchecked(5) };
    pub const BINARY_SUBSCR_DICT: Self = unsafe { Self::new_unchecked(157) };
    pub const BINARY_SUBSCR_GETITEM: Self = unsafe { Self::new_unchecked(158) };
    pub const BINARY_SUBSCR_LIST_INT: Self = unsafe { Self::new_unchecked(159) };
    pub const BINARY_SUBSCR_STR_INT: Self = unsafe { Self::new_unchecked(160) };
    pub const BINARY_SUBSCR_TUPLE_INT: Self = unsafe { Self::new_unchecked(161) };
    pub const BUILD_CONST_KEY_MAP: Self = unsafe { Self::new_unchecked(46) };
    pub const BUILD_LIST: Self = unsafe { Self::new_unchecked(47) };
    pub const BUILD_MAP: Self = unsafe { Self::new_unchecked(48) };
    pub const BUILD_SET: Self = unsafe { Self::new_unchecked(49) };
    pub const BUILD_SLICE: Self = unsafe { Self::new_unchecked(50) };
    pub const BUILD_STRING: Self = unsafe { Self::new_unchecked(51) };
    pub const BUILD_TUPLE: Self = unsafe { Self::new_unchecked(52) };
    pub const CACHE: Self = unsafe { Self::new_unchecked(0) };
    pub const CALL: Self = unsafe { Self::new_unchecked(53) };
    pub const CALL_ALLOC_AND_ENTER_INIT: Self = unsafe { Self::new_unchecked(162) };
    pub const CALL_BOUND_METHOD_EXACT_ARGS: Self = unsafe { Self::new_unchecked(163) };
    pub const CALL_BOUND_METHOD_GENERAL: Self = unsafe { Self::new_unchecked(164) };
    pub const CALL_BUILTIN_CLASS: Self = unsafe { Self::new_unchecked(165) };
    pub const CALL_BUILTIN_FAST: Self = unsafe { Self::new_unchecked(166) };
    pub const CALL_BUILTIN_FAST_WITH_KEYWORDS: Self = unsafe { Self::new_unchecked(167) };
    pub const CALL_BUILTIN_O: Self = unsafe { Self::new_unchecked(168) };
    pub const CALL_FUNCTION_EX: Self = unsafe { Self::new_unchecked(54) };
    pub const CALL_INTRINSIC_1: Self = unsafe { Self::new_unchecked(55) };
    pub const CALL_INTRINSIC_2: Self = unsafe { Self::new_unchecked(56) };
    pub const CALL_ISINSTANCE: Self = unsafe { Self::new_unchecked(169) };
    pub const CALL_KW: Self = unsafe { Self::new_unchecked(57) };
    pub const CALL_LEN: Self = unsafe { Self::new_unchecked(170) };
    pub const CALL_LIST_APPEND: Self = unsafe { Self::new_unchecked(171) };
    pub const CALL_METHOD_DESCRIPTOR_FAST: Self = unsafe { Self::new_unchecked(172) };
    pub const CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS: Self = unsafe { Self::new_unchecked(173) };
    pub const CALL_METHOD_DESCRIPTOR_NOARGS: Self = unsafe { Self::new_unchecked(174) };
    pub const CALL_METHOD_DESCRIPTOR_O: Self = unsafe { Self::new_unchecked(175) };
    pub const CALL_NON_PY_GENERAL: Self = unsafe { Self::new_unchecked(176) };
    pub const CALL_PY_EXACT_ARGS: Self = unsafe { Self::new_unchecked(177) };
    pub const CALL_PY_GENERAL: Self = unsafe { Self::new_unchecked(178) };
    pub const CALL_STR_1: Self = unsafe { Self::new_unchecked(179) };
    pub const CALL_TUPLE_1: Self = unsafe { Self::new_unchecked(180) };
    pub const CALL_TYPE_1: Self = unsafe { Self::new_unchecked(181) };
    pub const CHECK_EG_MATCH: Self = unsafe { Self::new_unchecked(6) };
    pub const CHECK_EXC_MATCH: Self = unsafe { Self::new_unchecked(7) };
    pub const CLEANUP_THROW: Self = unsafe { Self::new_unchecked(8) };
    pub const COMPARE_OP: Self = unsafe { Self::new_unchecked(58) };
    pub const COMPARE_OP_FLOAT: Self = unsafe { Self::new_unchecked(182) };
    pub const COMPARE_OP_INT: Self = unsafe { Self::new_unchecked(183) };
    pub const COMPARE_OP_STR: Self = unsafe { Self::new_unchecked(184) };
    pub const CONTAINS_OP: Self = unsafe { Self::new_unchecked(59) };
    pub const CONTAINS_OP_DICT: Self = unsafe { Self::new_unchecked(185) };
    pub const CONTAINS_OP_SET: Self = unsafe { Self::new_unchecked(186) };
    pub const CONVERT_VALUE: Self = unsafe { Self::new_unchecked(60) };
    pub const COPY: Self = unsafe { Self::new_unchecked(61) };
    pub const COPY_FREE_VARS: Self = unsafe { Self::new_unchecked(62) };
    pub const DELETE_ATTR: Self = unsafe { Self::new_unchecked(63) };
    pub const DELETE_DEREF: Self = unsafe { Self::new_unchecked(64) };
    pub const DELETE_FAST: Self = unsafe { Self::new_unchecked(65) };
    pub const DELETE_GLOBAL: Self = unsafe { Self::new_unchecked(66) };
    pub const DELETE_NAME: Self = unsafe { Self::new_unchecked(67) };
    pub const DELETE_SUBSCR: Self = unsafe { Self::new_unchecked(9) };
    pub const DICT_MERGE: Self = unsafe { Self::new_unchecked(68) };
    pub const DICT_UPDATE: Self = unsafe { Self::new_unchecked(69) };
    pub const END_ASYNC_FOR: Self = unsafe { Self::new_unchecked(10) };
    pub const END_FOR: Self = unsafe { Self::new_unchecked(11) };
    pub const END_SEND: Self = unsafe { Self::new_unchecked(12) };
    pub const ENTER_EXECUTOR: Self = unsafe { Self::new_unchecked(70) };
    pub const EXIT_INIT_CHECK: Self = unsafe { Self::new_unchecked(13) };
    pub const EXTENDED_ARG: Self = unsafe { Self::new_unchecked(71) };
    pub const FORMAT_SIMPLE: Self = unsafe { Self::new_unchecked(14) };
    pub const FORMAT_WITH_SPEC: Self = unsafe { Self::new_unchecked(15) };
    pub const FOR_ITER: Self = unsafe { Self::new_unchecked(72) };
    pub const FOR_ITER_GEN: Self = unsafe { Self::new_unchecked(187) };
    pub const FOR_ITER_LIST: Self = unsafe { Self::new_unchecked(188) };
    pub const FOR_ITER_RANGE: Self = unsafe { Self::new_unchecked(189) };
    pub const FOR_ITER_TUPLE: Self = unsafe { Self::new_unchecked(190) };
    pub const GET_AITER: Self = unsafe { Self::new_unchecked(16) };
    pub const GET_ANEXT: Self = unsafe { Self::new_unchecked(18) };
    pub const GET_AWAITABLE: Self = unsafe { Self::new_unchecked(73) };
    pub const GET_ITER: Self = unsafe { Self::new_unchecked(19) };
    pub const GET_LEN: Self = unsafe { Self::new_unchecked(20) };
    pub const GET_YIELD_FROM_ITER: Self = unsafe { Self::new_unchecked(21) };
    pub const IMPORT_FROM: Self = unsafe { Self::new_unchecked(74) };
    pub const IMPORT_NAME: Self = unsafe { Self::new_unchecked(75) };
    pub const INSTRUMENTED_CALL: Self = unsafe { Self::new_unchecked(244) };
    pub const INSTRUMENTED_CALL_FUNCTION_EX: Self = unsafe { Self::new_unchecked(246) };
    pub const INSTRUMENTED_CALL_KW: Self = unsafe { Self::new_unchecked(245) };
    pub const INSTRUMENTED_END_FOR: Self = unsafe { Self::new_unchecked(237) };
    pub const INSTRUMENTED_END_SEND: Self = unsafe { Self::new_unchecked(238) };
    pub const INSTRUMENTED_FOR_ITER: Self = unsafe { Self::new_unchecked(243) };
    pub const INSTRUMENTED_INSTRUCTION: Self = unsafe { Self::new_unchecked(247) };
    pub const INSTRUMENTED_JUMP_BACKWARD: Self = unsafe { Self::new_unchecked(249) };
    pub const INSTRUMENTED_JUMP_FORWARD: Self = unsafe { Self::new_unchecked(248) };
    pub const INSTRUMENTED_LOAD_SUPER_ATTR: Self = unsafe { Self::new_unchecked(242) };
    pub const INSTRUMENTED_POP_JUMP_IF_FALSE: Self = unsafe { Self::new_unchecked(251) };
    pub const INSTRUMENTED_POP_JUMP_IF_NONE: Self = unsafe { Self::new_unchecked(252) };
    pub const INSTRUMENTED_POP_JUMP_IF_NOT_NONE: Self = unsafe { Self::new_unchecked(253) };
    pub const INSTRUMENTED_POP_JUMP_IF_TRUE: Self = unsafe { Self::new_unchecked(250) };
    pub const INSTRUMENTED_RESUME: Self = unsafe { Self::new_unchecked(236) };
    pub const INSTRUMENTED_RETURN_CONST: Self = unsafe { Self::new_unchecked(240) };
    pub const INSTRUMENTED_RETURN_VALUE: Self = unsafe { Self::new_unchecked(239) };
    pub const INSTRUMENTED_YIELD_VALUE: Self = unsafe { Self::new_unchecked(241) };
    pub const INTERPRETER_EXIT: Self = unsafe { Self::new_unchecked(22) };
    pub const IS_OP: Self = unsafe { Self::new_unchecked(76) };
    pub const JUMP_BACKWARD: Self = unsafe { Self::new_unchecked(77) };
    pub const JUMP_BACKWARD_NO_INTERRUPT: Self = unsafe { Self::new_unchecked(78) };
    pub const JUMP_FORWARD: Self = unsafe { Self::new_unchecked(79) };
    pub const LIST_APPEND: Self = unsafe { Self::new_unchecked(80) };
    pub const LIST_EXTEND: Self = unsafe { Self::new_unchecked(81) };
    pub const LOAD_ASSERTION_ERROR: Self = unsafe { Self::new_unchecked(23) };
    pub const LOAD_ATTR: Self = unsafe { Self::new_unchecked(82) };
    pub const LOAD_ATTR_CLASS: Self = unsafe { Self::new_unchecked(191) };
    pub const LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN: Self = unsafe { Self::new_unchecked(192) };
    pub const LOAD_ATTR_INSTANCE_VALUE: Self = unsafe { Self::new_unchecked(193) };
    pub const LOAD_ATTR_METHOD_LAZY_DICT: Self = unsafe { Self::new_unchecked(194) };
    pub const LOAD_ATTR_METHOD_NO_DICT: Self = unsafe { Self::new_unchecked(195) };
    pub const LOAD_ATTR_METHOD_WITH_VALUES: Self = unsafe { Self::new_unchecked(196) };
    pub const LOAD_ATTR_MODULE: Self = unsafe { Self::new_unchecked(197) };
    pub const LOAD_ATTR_NONDESCRIPTOR_NO_DICT: Self = unsafe { Self::new_unchecked(198) };
    pub const LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES: Self = unsafe { Self::new_unchecked(199) };
    pub const LOAD_ATTR_PROPERTY: Self = unsafe { Self::new_unchecked(200) };
    pub const LOAD_ATTR_SLOT: Self = unsafe { Self::new_unchecked(201) };
    pub const LOAD_ATTR_WITH_HINT: Self = unsafe { Self::new_unchecked(202) };
    pub const LOAD_BUILD_CLASS: Self = unsafe { Self::new_unchecked(24) };
    pub const LOAD_CONST: Self = unsafe { Self::new_unchecked(83) };
    pub const LOAD_DEREF: Self = unsafe { Self::new_unchecked(84) };
    pub const LOAD_FAST: Self = unsafe { Self::new_unchecked(85) };
    pub const LOAD_FAST_AND_CLEAR: Self = unsafe { Self::new_unchecked(86) };
    pub const LOAD_FAST_CHECK: Self = unsafe { Self::new_unchecked(87) };
    pub const LOAD_FAST_LOAD_FAST: Self = unsafe { Self::new_unchecked(88) };
    pub const LOAD_FROM_DICT_OR_DEREF: Self = unsafe { Self::new_unchecked(89) };
    pub const LOAD_FROM_DICT_OR_GLOBALS: Self = unsafe { Self::new_unchecked(90) };
    pub const LOAD_GLOBAL: Self = unsafe { Self::new_unchecked(91) };
    pub const LOAD_GLOBAL_BUILTIN: Self = unsafe { Self::new_unchecked(203) };
    pub const LOAD_GLOBAL_MODULE: Self = unsafe { Self::new_unchecked(204) };
    pub const LOAD_LOCALS: Self = unsafe { Self::new_unchecked(25) };
    pub const LOAD_NAME: Self = unsafe { Self::new_unchecked(92) };
    pub const LOAD_SUPER_ATTR: Self = unsafe { Self::new_unchecked(93) };
    pub const LOAD_SUPER_ATTR_ATTR: Self = unsafe { Self::new_unchecked(205) };
    pub const LOAD_SUPER_ATTR_METHOD: Self = unsafe { Self::new_unchecked(206) };
    pub const MAKE_CELL: Self = unsafe { Self::new_unchecked(94) };
    pub const MAKE_FUNCTION: Self = unsafe { Self::new_unchecked(26) };
    pub const MAP_ADD: Self = unsafe { Self::new_unchecked(95) };
    pub const MATCH_CLASS: Self = unsafe { Self::new_unchecked(96) };
    pub const MATCH_KEYS: Self = unsafe { Self::new_unchecked(27) };
    pub const MATCH_MAPPING: Self = unsafe { Self::new_unchecked(28) };
    pub const MATCH_SEQUENCE: Self = unsafe { Self::new_unchecked(29) };
    pub const NOP: Self = unsafe { Self::new_unchecked(30) };
    pub const POP_EXCEPT: Self = unsafe { Self::new_unchecked(31) };
    pub const POP_JUMP_IF_FALSE: Self = unsafe { Self::new_unchecked(97) };
    pub const POP_JUMP_IF_NONE: Self = unsafe { Self::new_unchecked(98) };
    pub const POP_JUMP_IF_NOT_NONE: Self = unsafe { Self::new_unchecked(99) };
    pub const POP_JUMP_IF_TRUE: Self = unsafe { Self::new_unchecked(100) };
    pub const POP_TOP: Self = unsafe { Self::new_unchecked(32) };
    pub const PUSH_EXC_INFO: Self = unsafe { Self::new_unchecked(33) };
    pub const PUSH_NULL: Self = unsafe { Self::new_unchecked(34) };
    pub const RAISE_VARARGS: Self = unsafe { Self::new_unchecked(101) };
    pub const RERAISE: Self = unsafe { Self::new_unchecked(102) };
    pub const RESERVED: Self = unsafe { Self::new_unchecked(17) };
    pub const RESUME: Self = unsafe { Self::new_unchecked(149) };
    pub const RESUME_CHECK: Self = unsafe { Self::new_unchecked(207) };
    pub const RETURN_CONST: Self = unsafe { Self::new_unchecked(103) };
    pub const RETURN_GENERATOR: Self = unsafe { Self::new_unchecked(35) };
    pub const RETURN_VALUE: Self = unsafe { Self::new_unchecked(36) };
    pub const SEND: Self = unsafe { Self::new_unchecked(104) };
    pub const SEND_GEN: Self = unsafe { Self::new_unchecked(208) };
    pub const SETUP_ANNOTATIONS: Self = unsafe { Self::new_unchecked(37) };
    pub const SET_ADD: Self = unsafe { Self::new_unchecked(105) };
    pub const SET_FUNCTION_ATTRIBUTE: Self = unsafe { Self::new_unchecked(106) };
    pub const SET_UPDATE: Self = unsafe { Self::new_unchecked(107) };
    pub const STORE_ATTR: Self = unsafe { Self::new_unchecked(108) };
    pub const STORE_ATTR_INSTANCE_VALUE: Self = unsafe { Self::new_unchecked(209) };
    pub const STORE_ATTR_SLOT: Self = unsafe { Self::new_unchecked(210) };
    pub const STORE_ATTR_WITH_HINT: Self = unsafe { Self::new_unchecked(211) };
    pub const STORE_DEREF: Self = unsafe { Self::new_unchecked(109) };
    pub const STORE_FAST: Self = unsafe { Self::new_unchecked(110) };
    pub const STORE_FAST_LOAD_FAST: Self = unsafe { Self::new_unchecked(111) };
    pub const STORE_FAST_STORE_FAST: Self = unsafe { Self::new_unchecked(112) };
    pub const STORE_GLOBAL: Self = unsafe { Self::new_unchecked(113) };
    pub const STORE_NAME: Self = unsafe { Self::new_unchecked(114) };
    pub const STORE_SLICE: Self = unsafe { Self::new_unchecked(38) };
    pub const STORE_SUBSCR: Self = unsafe { Self::new_unchecked(39) };
    pub const STORE_SUBSCR_DICT: Self = unsafe { Self::new_unchecked(212) };
    pub const STORE_SUBSCR_LIST_INT: Self = unsafe { Self::new_unchecked(213) };
    pub const SWAP: Self = unsafe { Self::new_unchecked(115) };
    pub const TO_BOOL: Self = unsafe { Self::new_unchecked(40) };
    pub const TO_BOOL_ALWAYS_TRUE: Self = unsafe { Self::new_unchecked(214) };
    pub const TO_BOOL_BOOL: Self = unsafe { Self::new_unchecked(215) };
    pub const TO_BOOL_INT: Self = unsafe { Self::new_unchecked(216) };
    pub const TO_BOOL_LIST: Self = unsafe { Self::new_unchecked(217) };
    pub const TO_BOOL_NONE: Self = unsafe { Self::new_unchecked(218) };
    pub const TO_BOOL_STR: Self = unsafe { Self::new_unchecked(219) };
    pub const UNARY_INVERT: Self = unsafe { Self::new_unchecked(41) };
    pub const UNARY_NEGATIVE: Self = unsafe { Self::new_unchecked(42) };
    pub const UNARY_NOT: Self = unsafe { Self::new_unchecked(43) };
    pub const UNPACK_EX: Self = unsafe { Self::new_unchecked(116) };
    pub const UNPACK_SEQUENCE: Self = unsafe { Self::new_unchecked(117) };
    pub const UNPACK_SEQUENCE_LIST: Self = unsafe { Self::new_unchecked(220) };
    pub const UNPACK_SEQUENCE_TUPLE: Self = unsafe { Self::new_unchecked(221) };
    pub const UNPACK_SEQUENCE_TWO_TUPLE: Self = unsafe { Self::new_unchecked(222) };
    pub const WITH_EXCEPT_START: Self = unsafe { Self::new_unchecked(44) };
    pub const YIELD_VALUE: Self = unsafe { Self::new_unchecked(118) };
    pub const JUMP: Self = unsafe { Self::new_unchecked(256) };
    pub const JUMP_NO_INTERRUPT: Self = unsafe { Self::new_unchecked(257) };
    pub const LOAD_CLOSURE: Self = unsafe { Self::new_unchecked(258) };
    pub const LOAD_METHOD: Self = unsafe { Self::new_unchecked(259) };
    pub const LOAD_SUPER_METHOD: Self = unsafe { Self::new_unchecked(260) };
    pub const LOAD_ZERO_SUPER_ATTR: Self = unsafe { Self::new_unchecked(261) };
    pub const LOAD_ZERO_SUPER_METHOD: Self = unsafe { Self::new_unchecked(262) };
    pub const POP_BLOCK: Self = unsafe { Self::new_unchecked(263) };
    pub const SETUP_CLEANUP: Self = unsafe { Self::new_unchecked(264) };
    pub const SETUP_FINALLY: Self = unsafe { Self::new_unchecked(265) };
    pub const SETUP_WITH: Self = unsafe { Self::new_unchecked(266) };
    pub const STORE_FAST_MAYBE_NULL: Self = unsafe { Self::new_unchecked(267) };

    /// Creates a new opcode ID without checking the value is a valid opcode ID.
    ///
    /// # Safety
    ///
    /// The caller must ensure that `id` satisfies `Self::is_valid(id)`
    #[must_use]
    pub const unsafe fn new_unchecked(id: u16) -> Self {
        Self(id)
    }

    /// Whether the given ID matches one of the opcode IDs.
    #[must_use]
    pub const fn is_valid(id: u16) -> bool {
        matches!(id, 0..=118 | 149..=222 | 236..=253 | 256..=267)
    }

    /// Whether opcode ID is pseudo.
    #[must_use]
    pub const fn is_pseudo(&self) -> bool {
        matches!(
            *self,
            Self::JUMP
                | Self::JUMP_NO_INTERRUPT
                | Self::LOAD_CLOSURE
                | Self::LOAD_METHOD
                | Self::LOAD_SUPER_METHOD
                | Self::LOAD_ZERO_SUPER_ATTR
                | Self::LOAD_ZERO_SUPER_METHOD
                | Self::POP_BLOCK
                | Self::SETUP_CLEANUP
                | Self::SETUP_FINALLY
                | Self::SETUP_WITH
                | Self::STORE_FAST_MAYBE_NULL
        )
    }

    /// Whether opcode ID have 'HAS_ARG_FLAG' set.
    #[must_use]
    pub const fn has_arg(&self) -> bool {
        matches!(
            *self,
            Self::BINARY_OP
                | Self::BUILD_CONST_KEY_MAP
                | Self::BUILD_LIST
                | Self::BUILD_MAP
                | Self::BUILD_SET
                | Self::BUILD_SLICE
                | Self::BUILD_STRING
                | Self::BUILD_TUPLE
                | Self::CALL
                | Self::CALL_ALLOC_AND_ENTER_INIT
                | Self::CALL_BOUND_METHOD_EXACT_ARGS
                | Self::CALL_BOUND_METHOD_GENERAL
                | Self::CALL_BUILTIN_CLASS
                | Self::CALL_BUILTIN_FAST
                | Self::CALL_BUILTIN_FAST_WITH_KEYWORDS
                | Self::CALL_BUILTIN_O
                | Self::CALL_FUNCTION_EX
                | Self::CALL_INTRINSIC_1
                | Self::CALL_INTRINSIC_2
                | Self::CALL_ISINSTANCE
                | Self::CALL_KW
                | Self::CALL_LEN
                | Self::CALL_LIST_APPEND
                | Self::CALL_METHOD_DESCRIPTOR_FAST
                | Self::CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
                | Self::CALL_METHOD_DESCRIPTOR_NOARGS
                | Self::CALL_METHOD_DESCRIPTOR_O
                | Self::CALL_NON_PY_GENERAL
                | Self::CALL_PY_EXACT_ARGS
                | Self::CALL_PY_GENERAL
                | Self::CALL_STR_1
                | Self::CALL_TUPLE_1
                | Self::CALL_TYPE_1
                | Self::COMPARE_OP
                | Self::COMPARE_OP_FLOAT
                | Self::COMPARE_OP_INT
                | Self::COMPARE_OP_STR
                | Self::CONTAINS_OP
                | Self::CONTAINS_OP_DICT
                | Self::CONTAINS_OP_SET
                | Self::CONVERT_VALUE
                | Self::COPY
                | Self::COPY_FREE_VARS
                | Self::DELETE_ATTR
                | Self::DELETE_DEREF
                | Self::DELETE_FAST
                | Self::DELETE_GLOBAL
                | Self::DELETE_NAME
                | Self::DICT_MERGE
                | Self::DICT_UPDATE
                | Self::ENTER_EXECUTOR
                | Self::EXTENDED_ARG
                | Self::FOR_ITER
                | Self::FOR_ITER_GEN
                | Self::FOR_ITER_LIST
                | Self::FOR_ITER_RANGE
                | Self::FOR_ITER_TUPLE
                | Self::GET_AWAITABLE
                | Self::IMPORT_FROM
                | Self::IMPORT_NAME
                | Self::INSTRUMENTED_CALL
                | Self::INSTRUMENTED_CALL_KW
                | Self::INSTRUMENTED_FOR_ITER
                | Self::INSTRUMENTED_JUMP_BACKWARD
                | Self::INSTRUMENTED_JUMP_FORWARD
                | Self::INSTRUMENTED_LOAD_SUPER_ATTR
                | Self::INSTRUMENTED_POP_JUMP_IF_FALSE
                | Self::INSTRUMENTED_POP_JUMP_IF_NONE
                | Self::INSTRUMENTED_POP_JUMP_IF_NOT_NONE
                | Self::INSTRUMENTED_POP_JUMP_IF_TRUE
                | Self::INSTRUMENTED_RESUME
                | Self::INSTRUMENTED_RETURN_CONST
                | Self::INSTRUMENTED_YIELD_VALUE
                | Self::IS_OP
                | Self::JUMP_BACKWARD
                | Self::JUMP_BACKWARD_NO_INTERRUPT
                | Self::JUMP_FORWARD
                | Self::LIST_APPEND
                | Self::LIST_EXTEND
                | Self::LOAD_ATTR
                | Self::LOAD_ATTR_CLASS
                | Self::LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN
                | Self::LOAD_ATTR_INSTANCE_VALUE
                | Self::LOAD_ATTR_METHOD_LAZY_DICT
                | Self::LOAD_ATTR_METHOD_NO_DICT
                | Self::LOAD_ATTR_METHOD_WITH_VALUES
                | Self::LOAD_ATTR_MODULE
                | Self::LOAD_ATTR_NONDESCRIPTOR_NO_DICT
                | Self::LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
                | Self::LOAD_ATTR_PROPERTY
                | Self::LOAD_ATTR_SLOT
                | Self::LOAD_ATTR_WITH_HINT
                | Self::LOAD_CONST
                | Self::LOAD_DEREF
                | Self::LOAD_FAST
                | Self::LOAD_FAST_AND_CLEAR
                | Self::LOAD_FAST_CHECK
                | Self::LOAD_FAST_LOAD_FAST
                | Self::LOAD_FROM_DICT_OR_DEREF
                | Self::LOAD_FROM_DICT_OR_GLOBALS
                | Self::LOAD_GLOBAL
                | Self::LOAD_GLOBAL_BUILTIN
                | Self::LOAD_GLOBAL_MODULE
                | Self::LOAD_NAME
                | Self::LOAD_SUPER_ATTR
                | Self::LOAD_SUPER_ATTR_ATTR
                | Self::LOAD_SUPER_ATTR_METHOD
                | Self::MAKE_CELL
                | Self::MAP_ADD
                | Self::MATCH_CLASS
                | Self::POP_JUMP_IF_FALSE
                | Self::POP_JUMP_IF_NONE
                | Self::POP_JUMP_IF_NOT_NONE
                | Self::POP_JUMP_IF_TRUE
                | Self::RAISE_VARARGS
                | Self::RERAISE
                | Self::RESUME
                | Self::RETURN_CONST
                | Self::SEND
                | Self::SEND_GEN
                | Self::SET_ADD
                | Self::SET_FUNCTION_ATTRIBUTE
                | Self::SET_UPDATE
                | Self::STORE_ATTR
                | Self::STORE_ATTR_WITH_HINT
                | Self::STORE_DEREF
                | Self::STORE_FAST
                | Self::STORE_FAST_LOAD_FAST
                | Self::STORE_FAST_STORE_FAST
                | Self::STORE_GLOBAL
                | Self::STORE_NAME
                | Self::SWAP
                | Self::UNPACK_EX
                | Self::UNPACK_SEQUENCE
                | Self::UNPACK_SEQUENCE_LIST
                | Self::UNPACK_SEQUENCE_TUPLE
                | Self::UNPACK_SEQUENCE_TWO_TUPLE
                | Self::YIELD_VALUE
                | Self::JUMP
                | Self::JUMP_NO_INTERRUPT
                | Self::LOAD_CLOSURE
                | Self::LOAD_METHOD
                | Self::LOAD_SUPER_METHOD
                | Self::LOAD_ZERO_SUPER_ATTR
                | Self::LOAD_ZERO_SUPER_METHOD
                | Self::SETUP_CLEANUP
                | Self::SETUP_FINALLY
                | Self::SETUP_WITH
                | Self::STORE_FAST_MAYBE_NULL
        )
    }

    /// Whether opcode ID have 'HAS_CONST_FLAG' set.
    #[must_use]
    pub const fn has_const(&self) -> bool {
        matches!(
            *self,
            Self::INSTRUMENTED_RETURN_CONST | Self::LOAD_CONST | Self::RETURN_CONST
        )
    }

    /// Whether opcode ID have 'HAS_NAME_FLAG' set.
    #[must_use]
    pub const fn has_name(&self) -> bool {
        matches!(
            *self,
            Self::DELETE_ATTR
                | Self::DELETE_GLOBAL
                | Self::DELETE_NAME
                | Self::IMPORT_FROM
                | Self::IMPORT_NAME
                | Self::LOAD_ATTR
                | Self::LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN
                | Self::LOAD_ATTR_WITH_HINT
                | Self::LOAD_FROM_DICT_OR_GLOBALS
                | Self::LOAD_GLOBAL
                | Self::LOAD_NAME
                | Self::LOAD_SUPER_ATTR
                | Self::LOAD_SUPER_ATTR_ATTR
                | Self::LOAD_SUPER_ATTR_METHOD
                | Self::STORE_ATTR
                | Self::STORE_ATTR_WITH_HINT
                | Self::STORE_GLOBAL
                | Self::STORE_NAME
                | Self::LOAD_METHOD
                | Self::LOAD_SUPER_METHOD
                | Self::LOAD_ZERO_SUPER_ATTR
                | Self::LOAD_ZERO_SUPER_METHOD
        )
    }

    /// Whether opcode ID have 'HAS_JUMP_FLAG' set.
    #[must_use]
    pub const fn has_jump(&self) -> bool {
        matches!(
            *self,
            Self::FOR_ITER
                | Self::FOR_ITER_LIST
                | Self::FOR_ITER_RANGE
                | Self::FOR_ITER_TUPLE
                | Self::JUMP_BACKWARD
                | Self::JUMP_BACKWARD_NO_INTERRUPT
                | Self::JUMP_FORWARD
                | Self::POP_JUMP_IF_FALSE
                | Self::POP_JUMP_IF_NONE
                | Self::POP_JUMP_IF_NOT_NONE
                | Self::POP_JUMP_IF_TRUE
                | Self::SEND
                | Self::JUMP
                | Self::JUMP_NO_INTERRUPT
        )
    }

    /// Whether opcode ID have 'HAS_FREE_FLAG' set.
    #[must_use]
    pub const fn has_free(&self) -> bool {
        matches!(
            *self,
            Self::DELETE_DEREF
                | Self::LOAD_DEREF
                | Self::LOAD_FROM_DICT_OR_DEREF
                | Self::MAKE_CELL
                | Self::STORE_DEREF
        )
    }

    /// Whether opcode ID have 'HAS_LOCAL_FLAG' set.
    #[must_use]
    pub const fn has_local(&self) -> bool {
        matches!(
            *self,
            Self::BINARY_OP_INPLACE_ADD_UNICODE
                | Self::DELETE_FAST
                | Self::LOAD_FAST
                | Self::LOAD_FAST_AND_CLEAR
                | Self::LOAD_FAST_CHECK
                | Self::LOAD_FAST_LOAD_FAST
                | Self::STORE_FAST
                | Self::STORE_FAST_LOAD_FAST
                | Self::STORE_FAST_STORE_FAST
                | Self::LOAD_CLOSURE
                | Self::STORE_FAST_MAYBE_NULL
        )
    }

    /// Whether opcode ID have 'HAS_PURE_FLAG' set.
    #[must_use]
    pub const fn has_exc(&self) -> bool {
        matches!(
            *self,
            Self::COPY
                | Self::END_FOR
                | Self::END_SEND
                | Self::LOAD_CONST
                | Self::LOAD_FAST
                | Self::NOP
                | Self::POP_TOP
                | Self::PUSH_NULL
                | Self::SWAP
                | Self::UNARY_NOT
                | Self::LOAD_CLOSURE
                | Self::POP_BLOCK
                | Self::SETUP_CLEANUP
                | Self::SETUP_FINALLY
                | Self::SETUP_WITH
        )
    }
}

macro_rules! opcode_id_try_from_impl {
    ($t:ty) => {
        impl TryFrom<$t> for OpcodeId {
            type Error = ();

            fn try_from(value: $t) -> Result<Self, Self::Error> {
                let id = value.try_into().map_err(|_| ())?;
                if Self::is_valid(id) {
                    Ok(Self(id))
                } else {
                    Err(())
                }
            }
        }
    };
}

opcode_id_try_from_impl!(i8);
opcode_id_try_from_impl!(i16);
opcode_id_try_from_impl!(i32);
opcode_id_try_from_impl!(i64);
opcode_id_try_from_impl!(i128);
opcode_id_try_from_impl!(isize);
opcode_id_try_from_impl!(u8);
opcode_id_try_from_impl!(u16);
opcode_id_try_from_impl!(u32);
opcode_id_try_from_impl!(u64);
opcode_id_try_from_impl!(u128);
opcode_id_try_from_impl!(usize);
