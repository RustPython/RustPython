//! Python opcode implementation. Currently aligned with cpython 3.13.7

// This file is generated by scripts/gen_opcodes.py
// Do not edit!

/// Python opcode
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(u16)]
pub enum Opcode {
    BeforeAsyncWith = 1,
    BeforeWith = 2,
    BinaryOp = 45,
    BinaryOpAddFloat = 150,
    BinaryOpAddInt = 151,
    BinaryOpAddUnicode = 152,
    BinaryOpInplaceAddUnicode = 3,
    BinaryOpMultiplyFloat = 153,
    BinaryOpMultiplyInt = 154,
    BinaryOpSubtractFloat = 155,
    BinaryOpSubtractInt = 156,
    BinarySlice = 4,
    BinarySubscr = 5,
    BinarySubscrDict = 157,
    BinarySubscrGetitem = 158,
    BinarySubscrListInt = 159,
    BinarySubscrStrInt = 160,
    BinarySubscrTupleInt = 161,
    BuildConstKeyMap = 46,
    BuildList = 47,
    BuildMap = 48,
    BuildSet = 49,
    BuildSlice = 50,
    BuildString = 51,
    BuildTuple = 52,
    Cache = 0,
    Call = 53,
    CallAllocAndEnterInit = 162,
    CallBoundMethodExactArgs = 163,
    CallBoundMethodGeneral = 164,
    CallBuiltinClass = 165,
    CallBuiltinFast = 166,
    CallBuiltinFastWithKeywords = 167,
    CallBuiltinO = 168,
    CallFunctionEx = 54,
    CallIntrinsic1 = 55,
    CallIntrinsic2 = 56,
    CallIsinstance = 169,
    CallKw = 57,
    CallLen = 170,
    CallListAppend = 171,
    CallMethodDescriptorFast = 172,
    CallMethodDescriptorFastWithKeywords = 173,
    CallMethodDescriptorNoargs = 174,
    CallMethodDescriptorO = 175,
    CallNonPyGeneral = 176,
    CallPyExactArgs = 177,
    CallPyGeneral = 178,
    CallStr1 = 179,
    CallTuple1 = 180,
    CallType1 = 181,
    CheckEgMatch = 6,
    CheckExcMatch = 7,
    CleanupThrow = 8,
    CompareOp = 58,
    CompareOpFloat = 182,
    CompareOpInt = 183,
    CompareOpStr = 184,
    ContainsOp = 59,
    ContainsOpDict = 185,
    ContainsOpSet = 186,
    ConvertValue = 60,
    Copy = 61,
    CopyFreeVars = 62,
    DeleteAttr = 63,
    DeleteDeref = 64,
    DeleteFast = 65,
    DeleteGlobal = 66,
    DeleteName = 67,
    DeleteSubscr = 9,
    DictMerge = 68,
    DictUpdate = 69,
    EndAsyncFor = 10,
    EndFor = 11,
    EndSend = 12,
    EnterExecutor = 70,
    ExitInitCheck = 13,
    ExtendedArg = 71,
    FormatSimple = 14,
    FormatWithSpec = 15,
    ForIter = 72,
    ForIterGen = 187,
    ForIterList = 188,
    ForIterRange = 189,
    ForIterTuple = 190,
    GetAiter = 16,
    GetAnext = 18,
    GetAwaitable = 73,
    GetIter = 19,
    GetLen = 20,
    GetYieldFromIter = 21,
    ImportFrom = 74,
    ImportName = 75,
    InstrumentedCall = 244,
    InstrumentedCallFunctionEx = 246,
    InstrumentedCallKw = 245,
    InstrumentedEndFor = 237,
    InstrumentedEndSend = 238,
    InstrumentedForIter = 243,
    InstrumentedInstruction = 247,
    InstrumentedJumpBackward = 249,
    InstrumentedJumpForward = 248,
    InstrumentedLoadSuperAttr = 242,
    InstrumentedPopJumpIfFalse = 251,
    InstrumentedPopJumpIfNone = 252,
    InstrumentedPopJumpIfNotNone = 253,
    InstrumentedPopJumpIfTrue = 250,
    InstrumentedResume = 236,
    InstrumentedReturnConst = 240,
    InstrumentedReturnValue = 239,
    InstrumentedYieldValue = 241,
    InterpreterExit = 22,
    IsOp = 76,
    JumpBackward = 77,
    JumpBackwardNoInterrupt = 78,
    JumpForward = 79,
    ListAppend = 80,
    ListExtend = 81,
    LoadAssertionError = 23,
    LoadAttr = 82,
    LoadAttrClass = 191,
    LoadAttrGetattributeOverridden = 192,
    LoadAttrInstanceValue = 193,
    LoadAttrMethodLazyDict = 194,
    LoadAttrMethodNoDict = 195,
    LoadAttrMethodWithValues = 196,
    LoadAttrModule = 197,
    LoadAttrNondescriptorNoDict = 198,
    LoadAttrNondescriptorWithValues = 199,
    LoadAttrProperty = 200,
    LoadAttrSlot = 201,
    LoadAttrWithHint = 202,
    LoadBuildClass = 24,
    LoadConst = 83,
    LoadDeref = 84,
    LoadFast = 85,
    LoadFastAndClear = 86,
    LoadFastCheck = 87,
    LoadFastLoadFast = 88,
    LoadFromDictOrDeref = 89,
    LoadFromDictOrGlobals = 90,
    LoadGlobal = 91,
    LoadGlobalBuiltin = 203,
    LoadGlobalModule = 204,
    LoadLocals = 25,
    LoadName = 92,
    LoadSuperAttr = 93,
    LoadSuperAttrAttr = 205,
    LoadSuperAttrMethod = 206,
    MakeCell = 94,
    MakeFunction = 26,
    MapAdd = 95,
    MatchClass = 96,
    MatchKeys = 27,
    MatchMapping = 28,
    MatchSequence = 29,
    Nop = 30,
    PopExcept = 31,
    PopJumpIfFalse = 97,
    PopJumpIfNone = 98,
    PopJumpIfNotNone = 99,
    PopJumpIfTrue = 100,
    PopTop = 32,
    PushExcInfo = 33,
    PushNull = 34,
    RaiseVarargs = 101,
    Reraise = 102,
    Reserved = 17,
    Resume = 149,
    ResumeCheck = 207,
    ReturnConst = 103,
    ReturnGenerator = 35,
    ReturnValue = 36,
    Send = 104,
    SendGen = 208,
    SetupAnnotations = 37,
    SetAdd = 105,
    SetFunctionAttribute = 106,
    SetUpdate = 107,
    StoreAttr = 108,
    StoreAttrInstanceValue = 209,
    StoreAttrSlot = 210,
    StoreAttrWithHint = 211,
    StoreDeref = 109,
    StoreFast = 110,
    StoreFastLoadFast = 111,
    StoreFastStoreFast = 112,
    StoreGlobal = 113,
    StoreName = 114,
    StoreSlice = 38,
    StoreSubscr = 39,
    StoreSubscrDict = 212,
    StoreSubscrListInt = 213,
    Swap = 115,
    ToBool = 40,
    ToBoolAlwaysTrue = 214,
    ToBoolBool = 215,
    ToBoolInt = 216,
    ToBoolList = 217,
    ToBoolNone = 218,
    ToBoolStr = 219,
    UnaryInvert = 41,
    UnaryNegative = 42,
    UnaryNot = 43,
    UnpackEx = 116,
    UnpackSequence = 117,
    UnpackSequenceList = 220,
    UnpackSequenceTuple = 221,
    UnpackSequenceTwoTuple = 222,
    WithExceptStart = 44,
    YieldValue = 118,
    Jump = 256,
    JumpNoInterrupt = 257,
    LoadClosure = 258,
    LoadMethod = 259,
    LoadSuperMethod = 260,
    LoadZeroSuperAttr = 261,
    LoadZeroSuperMethod = 262,
    PopBlock = 263,
    SetupCleanup = 264,
    SetupFinally = 265,
    SetupWith = 266,
    StoreFastMaybeNull = 267,
}

impl Opcode {
    /// Whether the given ID matches one of the opcode IDs.
    #[must_use]
    pub const fn is_valid(id: u16) -> bool {
        matches!(id, 0..=118 | 149..=222 | 236..=253 | 256..=267)
    }

    /// Whether opcode ID is pseudo.
    #[must_use]
    pub const fn is_pseudo(&self) -> bool {
        matches!(
            *self,
            Self::Jump
                | Self::JumpNoInterrupt
                | Self::LoadClosure
                | Self::LoadMethod
                | Self::LoadSuperMethod
                | Self::LoadZeroSuperAttr
                | Self::LoadZeroSuperMethod
                | Self::PopBlock
                | Self::SetupCleanup
                | Self::SetupFinally
                | Self::SetupWith
                | Self::StoreFastMaybeNull
        )
    }

    /// Whether opcode ID have 'HAS_ARG_FLAG' set.
    #[must_use]
    pub const fn has_arg(&self) -> bool {
        matches!(
            *self,
            Self::BinaryOp
                | Self::BuildConstKeyMap
                | Self::BuildList
                | Self::BuildMap
                | Self::BuildSet
                | Self::BuildSlice
                | Self::BuildString
                | Self::BuildTuple
                | Self::Call
                | Self::CallAllocAndEnterInit
                | Self::CallBoundMethodExactArgs
                | Self::CallBoundMethodGeneral
                | Self::CallBuiltinClass
                | Self::CallBuiltinFast
                | Self::CallBuiltinFastWithKeywords
                | Self::CallBuiltinO
                | Self::CallFunctionEx
                | Self::CallIntrinsic1
                | Self::CallIntrinsic2
                | Self::CallIsinstance
                | Self::CallKw
                | Self::CallLen
                | Self::CallListAppend
                | Self::CallMethodDescriptorFast
                | Self::CallMethodDescriptorFastWithKeywords
                | Self::CallMethodDescriptorNoargs
                | Self::CallMethodDescriptorO
                | Self::CallNonPyGeneral
                | Self::CallPyExactArgs
                | Self::CallPyGeneral
                | Self::CallStr1
                | Self::CallTuple1
                | Self::CallType1
                | Self::CompareOp
                | Self::CompareOpFloat
                | Self::CompareOpInt
                | Self::CompareOpStr
                | Self::ContainsOp
                | Self::ContainsOpDict
                | Self::ContainsOpSet
                | Self::ConvertValue
                | Self::Copy
                | Self::CopyFreeVars
                | Self::DeleteAttr
                | Self::DeleteDeref
                | Self::DeleteFast
                | Self::DeleteGlobal
                | Self::DeleteName
                | Self::DictMerge
                | Self::DictUpdate
                | Self::EnterExecutor
                | Self::ExtendedArg
                | Self::ForIter
                | Self::ForIterGen
                | Self::ForIterList
                | Self::ForIterRange
                | Self::ForIterTuple
                | Self::GetAwaitable
                | Self::ImportFrom
                | Self::ImportName
                | Self::InstrumentedCall
                | Self::InstrumentedCallKw
                | Self::InstrumentedForIter
                | Self::InstrumentedJumpBackward
                | Self::InstrumentedJumpForward
                | Self::InstrumentedLoadSuperAttr
                | Self::InstrumentedPopJumpIfFalse
                | Self::InstrumentedPopJumpIfNone
                | Self::InstrumentedPopJumpIfNotNone
                | Self::InstrumentedPopJumpIfTrue
                | Self::InstrumentedResume
                | Self::InstrumentedReturnConst
                | Self::InstrumentedYieldValue
                | Self::IsOp
                | Self::JumpBackward
                | Self::JumpBackwardNoInterrupt
                | Self::JumpForward
                | Self::ListAppend
                | Self::ListExtend
                | Self::LoadAttr
                | Self::LoadAttrClass
                | Self::LoadAttrGetattributeOverridden
                | Self::LoadAttrInstanceValue
                | Self::LoadAttrMethodLazyDict
                | Self::LoadAttrMethodNoDict
                | Self::LoadAttrMethodWithValues
                | Self::LoadAttrModule
                | Self::LoadAttrNondescriptorNoDict
                | Self::LoadAttrNondescriptorWithValues
                | Self::LoadAttrProperty
                | Self::LoadAttrSlot
                | Self::LoadAttrWithHint
                | Self::LoadConst
                | Self::LoadDeref
                | Self::LoadFast
                | Self::LoadFastAndClear
                | Self::LoadFastCheck
                | Self::LoadFastLoadFast
                | Self::LoadFromDictOrDeref
                | Self::LoadFromDictOrGlobals
                | Self::LoadGlobal
                | Self::LoadGlobalBuiltin
                | Self::LoadGlobalModule
                | Self::LoadName
                | Self::LoadSuperAttr
                | Self::LoadSuperAttrAttr
                | Self::LoadSuperAttrMethod
                | Self::MakeCell
                | Self::MapAdd
                | Self::MatchClass
                | Self::PopJumpIfFalse
                | Self::PopJumpIfNone
                | Self::PopJumpIfNotNone
                | Self::PopJumpIfTrue
                | Self::RaiseVarargs
                | Self::Reraise
                | Self::Resume
                | Self::ReturnConst
                | Self::Send
                | Self::SendGen
                | Self::SetAdd
                | Self::SetFunctionAttribute
                | Self::SetUpdate
                | Self::StoreAttr
                | Self::StoreAttrWithHint
                | Self::StoreDeref
                | Self::StoreFast
                | Self::StoreFastLoadFast
                | Self::StoreFastStoreFast
                | Self::StoreGlobal
                | Self::StoreName
                | Self::Swap
                | Self::UnpackEx
                | Self::UnpackSequence
                | Self::UnpackSequenceList
                | Self::UnpackSequenceTuple
                | Self::UnpackSequenceTwoTuple
                | Self::YieldValue
                | Self::Jump
                | Self::JumpNoInterrupt
                | Self::LoadClosure
                | Self::LoadMethod
                | Self::LoadSuperMethod
                | Self::LoadZeroSuperAttr
                | Self::LoadZeroSuperMethod
                | Self::SetupCleanup
                | Self::SetupFinally
                | Self::SetupWith
                | Self::StoreFastMaybeNull
        )
    }

    /// Whether opcode ID have 'HAS_CONST_FLAG' set.
    #[must_use]
    pub const fn has_const(&self) -> bool {
        matches!(
            *self,
            Self::InstrumentedReturnConst | Self::LoadConst | Self::ReturnConst
        )
    }

    /// Whether opcode ID have 'HAS_NAME_FLAG' set.
    #[must_use]
    pub const fn has_name(&self) -> bool {
        matches!(
            *self,
            Self::DeleteAttr
                | Self::DeleteGlobal
                | Self::DeleteName
                | Self::ImportFrom
                | Self::ImportName
                | Self::LoadAttr
                | Self::LoadAttrGetattributeOverridden
                | Self::LoadAttrWithHint
                | Self::LoadFromDictOrGlobals
                | Self::LoadGlobal
                | Self::LoadName
                | Self::LoadSuperAttr
                | Self::LoadSuperAttrAttr
                | Self::LoadSuperAttrMethod
                | Self::StoreAttr
                | Self::StoreAttrWithHint
                | Self::StoreGlobal
                | Self::StoreName
                | Self::LoadMethod
                | Self::LoadSuperMethod
                | Self::LoadZeroSuperAttr
                | Self::LoadZeroSuperMethod
        )
    }

    /// Whether opcode ID have 'HAS_JUMP_FLAG' set.
    #[must_use]
    pub const fn has_jump(&self) -> bool {
        matches!(
            *self,
            Self::ForIter
                | Self::ForIterList
                | Self::ForIterRange
                | Self::ForIterTuple
                | Self::JumpBackward
                | Self::JumpBackwardNoInterrupt
                | Self::JumpForward
                | Self::PopJumpIfFalse
                | Self::PopJumpIfNone
                | Self::PopJumpIfNotNone
                | Self::PopJumpIfTrue
                | Self::Send
                | Self::Jump
                | Self::JumpNoInterrupt
        )
    }

    /// Whether opcode ID have 'HAS_FREE_FLAG' set.
    #[must_use]
    pub const fn has_free(&self) -> bool {
        matches!(
            *self,
            Self::DeleteDeref
                | Self::LoadDeref
                | Self::LoadFromDictOrDeref
                | Self::MakeCell
                | Self::StoreDeref
        )
    }

    /// Whether opcode ID have 'HAS_LOCAL_FLAG' set.
    #[must_use]
    pub const fn has_local(&self) -> bool {
        matches!(
            *self,
            Self::BinaryOpInplaceAddUnicode
                | Self::DeleteFast
                | Self::LoadFast
                | Self::LoadFastAndClear
                | Self::LoadFastCheck
                | Self::LoadFastLoadFast
                | Self::StoreFast
                | Self::StoreFastLoadFast
                | Self::StoreFastStoreFast
                | Self::LoadClosure
                | Self::StoreFastMaybeNull
        )
    }

    /// Whether opcode ID have 'HAS_PURE_FLAG' set.
    #[must_use]
    pub const fn has_exc(&self) -> bool {
        matches!(
            *self,
            Self::Copy
                | Self::EndFor
                | Self::EndSend
                | Self::LoadConst
                | Self::LoadFast
                | Self::Nop
                | Self::PopTop
                | Self::PushNull
                | Self::Swap
                | Self::UnaryNot
                | Self::LoadClosure
                | Self::PopBlock
                | Self::SetupCleanup
                | Self::SetupFinally
                | Self::SetupWith
        )
    }
}

macro_rules! opcode_try_from_impl {
    ($t:ty) => {
        impl TryFrom<$t> for Opcode {
            type Error = ();

            fn try_from(value: $t) -> Result<Self, Self::Error> {
                let id = value.try_into().map_err(|_| ())?;
                if Self::is_valid(id) {
                    // SAFETY: We just validated that we have a valid opcode id.
                    Ok(unsafe { std::mem::transmute::<u16, Self>(id) })
                } else {
                    Err(())
                }
            }
        }
    };
}

opcode_try_from_impl!(i8);
opcode_try_from_impl!(i16);
opcode_try_from_impl!(i32);
opcode_try_from_impl!(i64);
opcode_try_from_impl!(i128);
opcode_try_from_impl!(isize);
opcode_try_from_impl!(u8);
opcode_try_from_impl!(u16);
opcode_try_from_impl!(u32);
opcode_try_from_impl!(u64);
opcode_try_from_impl!(u128);
opcode_try_from_impl!(usize);
